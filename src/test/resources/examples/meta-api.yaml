openapi: 3.0.0
info:
  title: WhatsApp Cloud API
  description: >-
    Welcome to the WhatsApp Business Platform Cloud API from Meta.


    Individual developers and Business Service Providers (BSPs) can now send and
    receive messages using a cloud-hosted version of the WhatsApp Business
    Platform API. Compared to the previous solutions, Cloud API is simpler to
    use and is a more cost-effective way for businesses to use WhatsApp.


    Whether you’re a business or a BSP, Cloud API provides great benefits when
    compared to WhatsApp On-Premises API.


    So let's get started!


    # Installation


    ## Quick Installation


    Use the `Run in Postman` button below or at the top right corner of the
    documentation to import this collection into your local Postman app.


    | | |

    |---|---|

    | [![Run in
    Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/13382743-84d01ff8-4253-4720-b454-af661f36acc2?action=collection%2Ffork&collection-url=entityId%3D13382743-84d01ff8-4253-4720-b454-af661f36acc2%26entityType%3Dcollection%26workspaceId%3Da31742be-ce5c-4b9d-a828-e10ee7f7a5a3)|
    Click to fork WhatsApp Cloud API into your workspace. |


    # Environment


    This collection includes pre-configured environments. To use the
    pre-configured environment for Cloud API, select **Cloud API** from the
    environment drop down list box at the top right corner of Postman. This
    automatically populates the correct environment variables listed in the
    table below.


    To run requests in the [Get Started](#01e24b28-7896-4aee-946c-210b6945e50b)
    guide using a custom environment, you need to set the listed variables in
    the following table to values in your custom environment:


    | Name | Description |

    | --- | --- |

    | `Version` | Latest [Graph API
    version](https://developers.facebook.com/docs/graph-api/). For example:
    **`v15.0`** |

    | `User-Access-Token` | Your user access token after signing up at
    [developers.facebook.com](https://developers.facebook.com). |

    | `WABA-ID` | Your WhatsApp Business Account (WABA) ID. |

    | `Phone-Number-ID` | ID for the phone number connected to the WhatsApp
    Business API. You can get this with a [Get Phone Number ID
    request](3184f675-d289-46f1-88e5-e2b11549c418). |

    | `Business-ID` | Your Business' ID. Once you have your Phone-Number-ID,
    make a [Get Business Profile request](#99fd3743-46cf-46c4-95b5-431c6a4eb0b0)
    to get your Business' ID. |

    | `Recipient-Phone-Number` | Phone number that you want to send a WhatsApp
    message to. |

    | `Media-ID` | ID for the media to [send a media
    message](#0a632754-3788-43bf-b785-ac6a73423d5a) or [media template
    message](#439c926a-8a6c-4972-ab2c-d99297716da9) to your customers. |

    | `Media-URL` | URL for the media to [download media
    content](#cbe5ece3-246c-48f3-b338-074187dfef66). |

    | `Upload-ID` | Session ID for uploading data (images) to Meta using
    [Resumable Upload
    API](https://documenter.getpostman.com/view/13382743/UVC5FTHT?fbclid=IwAR083mCseNzJm-JgxlIQbdF30hkAbEOHkbBaw9bA7-isGKU6uwtq1RJKc0o#ec2c5110-134c-4f2d-ba13-4d33ad13d1df).
    |


    # Changelog


    For information relating to what has changed in the WhatsApp Business
    Platform, see [WhatsApp Business Platform
    Changelog](https://developers.facebook.com/docs/whatsapp/business-platform/changelog#october-6--2022).


    # What's New for Cloud API


    This section covers new features and updates for WhatsApp Business Platform
    Cloud API Postman collection. 


    ## December 13th 2022


    The following features are now available on the Cloud API, hosted by Meta,
    with no upgrades necessary: 


    **Improved Media Link Caching**

    For Media message sends using links, the Cloud API now supports HTTP Caching
    Protocol. This allows businesses to set their preferred caching options and
    communicate them with the Cloud API by setting relevant HTTP Headers. To
    learn more about media link caching, see [Media HTTP
    Caching](https://developers.facebook.com/docs/whatsapp/cloud-api/guides/send-messages#media-http-caching).  


    **Reduction for Webhook Retry Policy** 

    Cloud API calls the businesses Webhook to notify the business of message
    deliveries, reads, and replies. If the Webhook is down for any reason Cloud
    API previously retried notifying the Webhook for up to 30 days. Going
    forward we have reduced this number to 7 days. For more information, see our
    [developer
    documentation](https://developers.facebook.com/docs/whatsapp/cloud-api/guides/set-up-webhooks#webhook-delivery-failure). 


    **New media endpoint that checks ownership permissions**

    Introducing a new optional media endpoint parameter for verifying media
    ownership on a phone number level, which allows for differentiation for
    types of media owned by a specific phone number. For more information, see
    **API Reference**>>**Media**:


    * **Retrieve Media URL**

    * **Delete Media**


    ## November 3rd 2022


    **Messages Per Second**


    Cloud API now supports up to 500 (up from 350) messages per second (MPS) of
    combined text and media messages, by request. For more information, see
    [Throughput](https://developers.facebook.com/docs/whatsapp/cloud-api/overview#throughput)
    for details.


    If you already have 350 MPS it will be increased to 500 MPS automatically.
    If you already requested 350 MPS but the process has not been completed, you
    will receive 500 MPS upon completion.


    **Document Captions**


    Cloud API now supports captions on documents sent to and received from
    customers. For more information, see [Media
    Object](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages#media-object).


    **Error Codes**

    We have updated our error codes documentation to be more actionable. There
    have been some changes to existing error codes in Graph API **`v15.0`** and
    above. Some error titles also have been updated. For more information, see
    [Error
    Codes](https://developers.facebook.com/docs/whatsapp/cloud-api/support/error-codes).


    ## October 6th 2022


    **Graph API v15 update**


    WhatsApp Cloud API has been updated for Graph API version 15.0. The
    `Version` environment variable for environment **Cloud API [Cloud API]** has
    been automatically updated to **`v15.0`**.


    **Embedded Signup**


    Embedded Signup now supports mobile web browsers. The user interface will
    automatically optimize for a mobile experience when it detects that the
    viewer is using a mobile web browser.


    **Callback Override**


    You can now use different callback URLs for each of your WhatsApp Business
    Accounts without having to create a unique app for each WhatsApp Business
    Account. See [Overriding the Callback
    URL](https://developers.facebook.com/docs/whatsapp/embedded-signup/webhooks#overriding-the-callback-url)
    for details.


    **Message Templates**


    Text parameters (**`messages.parameters.text`**) for message templates that
    only use a body component (**`messages.type:body`**) can now total up to
    32,768 characters. For more information, see [Parameters
    object](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages#parameter-object).


    **Messages Per Second**


    Cloud API now supports up to 350 (up from 250) messages per second (MPS) of
    combined text and media messages, by request. For more information, see
    [Throughput](https://developers.facebook.com/docs/whatsapp/cloud-api/overview#throughput)
    for details.


    If you already have 250 MPS it will be increased to 350 MPS automatically.
    If you already requested 250 MPS but the process has not been completed, you
    will receive 350 MPS upon completion.


    ## September 22nd 2022 - Reaction Messages and Business Profile


    The September 22nd 2022 release contains the following features:


    **Reactions**


    You can now send and receive reactions on messages. Additionally, we have
    also added Webhook support for reaction messages.


    The new API request has been added to **API
    Reference**>>**Messages**>>**Send Reply with Reaction Message**.


    **Business Profile**


    The **`about`** field on business profiles is now supported. For more
    information, see [Business
    Profiles](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/business-profiles).


    ## August 25th 2022 - Products and Services and Animated Sticker support


    The August 25th 2022 release contains the following features:


    **Products and Services**


    Two new Product and Services API requests have been added to **API
    Reference**>>**Messages**:


    * **Send Single Product Message**

    * **Send Multi-Product Message**


    Additionally, there are two new Product related Webhooks:


    * **Received Product Enquiry Message**

    * **Received Order Messages**


    For overview information, see [Sell Product and
    Services](https://developers.facebook.com/docs/whatsapp/cloud-api/guides/sell-products-and-services).


    **Animated Stickers**


    You can now include animated stickers in outbound, business-initiated
    messages and receive Webhooks describing those messages the same way you
    would if you were sending a non-animated sticker. Refer to the **API
    Reference**>>**Messages**>>**Message Object** sticker property and for
    sticker asset requirements.


    #### August 17th 2022 - Resumable Upload API requests for updating your
    business profile picture


    WhatsApp Cloud API now has three new requests in **API
    Reference**>>**Business Profiles**:


    * **Resumable Upload - Create an Upload Session**

    * **Resumable Upload - Upload File Data**

    * **Resumable Upload - Query File Upload Status**


    These requests simplify uploading profile pictures to Meta. You can now get
    a **`profile_picture_handle`** that you can use to update pictures.


    ## August 2nd 2022 - Graph API v14 update

    WhatsApp Cloud API has been updated for Graph API version 14.0. The
    `Version` environment variable for environment **Cloud API [Cloud API]** has
    been automatically updated to **`v14.0`**.



    ## July 21st 2022

    The July 2022 release contains the following features:


    * Businesses can now reply to any message in a conversation thread. Replies
    will include a contextual bubble referencing the replied-to message. Refer
    to the [Send
    Messages](https://developers.facebook.com/docs/whatsapp/cloud-api/guides/send-messages#replies)
    guide to learn how to reply to a message. 

    For more information on the new Postman Reply-To Requests, see [API
    **Reference**>>**Messages**](https://documenter.getpostman.com/view/13382743/UVC5FTHT#1f4f7644-cc97-40b5-b8e4-c19da268fff1).
    For our WhatsApp Cloud API developer docs, see
    [**Reference**>>**Messages**](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages).


    * WhatsApp Cloud API now supports up to 250 messages per second (MPS) of
    combined sending and receiving (inclusive of text and media messages). If
    you are an enterprise partner you can open a Direct Support ticket to
    request 250 MPS throughput by selecting Question Topic: "**Cloud API
    Issues**", Request Type: "**Request to migrate to 250 MPS throughput**" and
    fill out the required information.


    ## May 2022

    Existing direct partners and Business Service Providers (BSPs) can now send
    and receive messages using a cloud-hosted version of the WhatsApp Business
    API. Compared to On-Premises API, the Cloud-based API is simpler to use and
    is a more cost-effective way for businesses to use WhatsApp.
  version: 1.0.0
servers:
  - url: https://graph.facebook.com
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
security:
  - bearerAuth: []
tags:
  - name: Overview
    description: >-
      The WhatsApp Business Platform Cloud API allows medium and large
      businesses to communicate with their customers at scale. Using the API,
      businesses can build systems that connect thousands of customers with
      agents or bots, enabling both programmatic and manual communication.
      Additionally, you can integrate the API with numerous backend systems,
      such as CRM and marketing platforms.
  - name: Overview > On-Premises API vs. Cloud API
    description: >-
      Businesses looking to use the WhatsApp Business Platform have two hosting
      options: On-Premises API and Cloud API. In general, we recommend that the
      majority of businesses use the Cloud API due to ease of implementation and
      maintenance. For a full performance comparison, see:


      *   [Key
      Differences](https://developers.facebook.com/docs/whatsapp/cloud-api/overview/on-premises-cloud-api-comparison#key-differences)

      *   [Messaging Features
      Comparison](https://developers.facebook.com/docs/whatsapp/cloud-api/overview/on-premises-cloud-api-comparison#messaging-features)
      
      
      <!-- Saved by grahamp 09/02/2021: Back up of Key differences in the case
      we want to keep Postman complete and not link out to
      developers.facebook.com. -->


      <!-- 

      <br>| <b>Feature</b> | <b>On-Premises API (v2.37)</b> | <b>Cloud
      API/Beta</b>
      |<br>|--------------------|-----------------------------|--------------------|<br>|
      Check Contact | ✅ | 🆇 (For Cloud API, this is no longer required to send
      messages. You can just use the person’s phone number.) |<br>| Text
      Messages | ✅ | ✅ |<br>| Media Messages | ✅ | ✅ &nbsp; Images and documents
      are supported in October 2021. Audio and video will be supported starting
      November 2021.|<br>| Media Provider | ✅ | 🆇 |<br>| Text Message Templates
      | ✅ | ✅ |<br>| Media Message Templates | ✅ | ✅ |<br>| Interactive Message
      Templates | ✅ | ✅ |<br>| Contacts send/receive (not in template) | ✅ | ✅
      |<br>| Location send/receive (not in template) | ✅ | ✅ |<br>| Stickers | ✅
      | 🆇 |<br>| Sticker packs | ✅ | 🆇 |<br>| Conversation-Based Pricing -
      global rollout | ✅ &nbsp;(Feb, 2022) | ✅ &nbsp;(Feb, 2022) |<br>| List
      Messages | ✅ &nbsp;(v.2.35) | 🆇 |<br>| Dynamic Reply Buttons | ✅
      &nbsp;(v.2.35) | 🆇 |<br>| Product List Messages | ✅ &nbsp;(v.2.37) | 🆇
      |<br>| Ads with Content | ✅ | 🆇 | 

      -->
  - name: Overview > Cloud API Overview
    description: >-
      To use the Cloud API, businesses make calls to Meta’s [Graph
      API](https://developers.facebook.com/docs/graph-api/) to send messages and
      Webhooks to receive events, such as messages and status updates. The Graph
      API is a form of Remote Procedure Call expressed over HTTP, where
      operations and their parameters are expressed using a combination of URL
      parameters, headers, and request body.


      A call to the Graph API from UNIX-based command lines looks like this:


      ``` shell

      curl -X POST \

      https://graph.facebook.com/{{Version}}/{{Recipient-Phone-Number}}/messages
      \
        -H "Authorization: {{User-Access-Token}}" \
        -d '{
          "messaging_product": "whatsapp",
          "to": "1650XXXXXXX",
          "text": {"body" : "hi"}
       }'

      ```


      Compared to the On-Premises implementation, a Graph API integration relies
      on a different authentication mechanism (see [User Access
      Token](#3dd2844f-10f4-4e52-8c59-b6f4f4f92b4b)), a different Webhook setup
      process (see [Setup Webhooks](#41946d3c-6460-4bc2-963f-d5732e48e84e)), and
      has different latencies and error rates. For more information on how to
      use the Graph API, see the [Graph API Developer
      Documentation](https://developers.facebook.com/docs/graph-api/).
  - name: Overview > Message Throughput
    description: >-
      The Cloud API supports up to 80 messages per second (mps) combined sending
      and receiving of text and media messages by default, and up to 500 mps by
      request.


      For more information, see
      [Throughput](https://developers.facebook.com/docs/whatsapp/cloud-api/overview#throughput).
  - name: Overview > Rate Limits
    description: >-
      Cloud API follows [Business Use Case Rate
      Limits](https://developers.facebook.com/docs/graph-api/overview/rate-limiting/#buc-rate-limits).
      Each WhatsApp Business Account (WABA) has a call count rate limit and each
      call made by your app counts toward the limit. An app’s call count for a
      WABA is the number of calls it can make to business accounts under this
      WABA during a rolling one hour window and is calculated as follows:


      ```Calls within one hour for a WABA = 1800000 * Number of Registered
      Numbers under this WABA```


      You will receive an **`80007`** error code when you hit call limits.


      Besides platform rate limits, we have the following rate limits applicable
      to Cloud API accounts:


      * [Test message rate
      limit](https://www.facebook.com/business/help/2640149499569241): apply to
      unverified WhatsApp business accounts.

      * [Quality rating and messaging
      limits](https://developers.facebook.com/docs/whatsapp/api/rate-limits#quality-rating-and-messaging-limits):
      apply to verified WhatsApp business accounts 

      * [Capacity rate
      limit](https://developers.facebook.com/docs/whatsapp/api/rate-limits#capacity):
      apply to all accounts.

      * [Business phone rate
      limit](https://developers.facebook.com/docs/whatsapp/messaging-limits#capacity):
      Applies to all accounts and limits the throughput per business phone
      number.
  - name: Overview > Available Metrics
    description: >-
      Cloud API users can see the number of messages sent and delivered, as well
      as other metrics. Fore more information, see [Get Account
      Metrics](https://developers.facebook.com/docs/whatsapp/business-management-api/analytics).
  - name: Overview > Scaling
    description: >-
      Within Meta infrastructure, the Cloud API automatically scales and adjusts
      to handle your workload, within your rate limit (messaging volume and
      number of WhatsApp business accounts).
  - name: Overview > Data Privacy & Security
    description: >-
      For in depth information relating to Data Privacy and Security, see [Data
      Privacy and Security FAQs](#5b46e4da-04db-4eb1-9898-0e01295048c7).
  - name: Overview > Data Privacy & Security > Message Flows
    description: >-
      When a user sends a message to one of these businesses, the message
      travels end-to-end encrypted between the user and the Cloud API. As per
      the Signal protocol, the user and the Cloud API, on behalf of the
      business, negotiate encryption keys and establish a secure communication
      channel. WhatsApp cannot access any message content exchanged between
      users and businesses.


      Once a message is received by the Cloud API, it gets decrypted and
      forwarded to the Business. Messages are only temporarily stored by the
      Cloud API as required to provide the base API functionality.


      Messages from a business to a user flow on the reverse path. Businesses
      send messages to Cloud API. The Cloud API service stores the messages
      temporarily and takes on the task to send the message to the WhatsApp
      platform. Messages are stored for any necessary retransmissions.


      All messages are encrypted by the Cloud API before being sent to WhatsApp
      using the Signal protocol with keys negotiated with the user (recipient).


      WhatsApp acts as the transport service. It provides the message forwarding
      software; both client and server. It has no visibility into the messages
      being sent. It protects the users data by detecting unusual messaging
      patterns (like a business trying to message all users) or collecting spam
      reports from users.


      Cloud API, operated by Meta, acts as the intermediary between WhatsApp and
      the Cloud API businesses. In other words, those businesses have given
      Cloud API the power to operate on their behalf. Because of this, WhatsApp
      forwards all message traffic destined for those businesses to Cloud API.
      WhatsApp also expects to receive from Cloud API all message traffic from
      those businesses. This is the same client behavior that the On-Premise
      client has.


      WhatsApp gives Cloud API metering and billing information for the Cloud
      API businesses. It does not share any other messaging information.


      Meta, in providing the WhatsApp Cloud API service, acts as a Data
      Processor on behalf of the business. In other words, the businesses have
      requested Meta to provide programmatic access to the WhatsApp platform.


      Cloud API receives from WhatsApp the messages destined for the businesses
      that use Cloud API. Cloud API also sends to WhatsApp the messages sent by
      those businesses.  

      Other parts of Meta (other than Cloud API) do not have access to the Cloud
      API business communications, including message content and metadata. Meta
      does not use any Cloud API data for advertising.
  - name: Overview > Data Privacy & Security > Stored and Collected Data
    description: >-
      All data collected, stored and accessed by Cloud API is controlled and
      monitored to ensure proper usage and maintain the high level of privacy
      expected from a WhatsApp client.


      Information about the businesses, including their phone numbers, business
      address, contacts, type, etc. is maintained by Meta and the Business
      Manager product and complies with the terms of service set by Meta. Cloud
      API relies on Business Manager and other Meta systems to identify any
      access to Cloud API on behalf of the business.


      Messages sent or received through Cloud API are only accessed by Cloud
      API, no other part of Meta can use this information. Messages have a
      maximum retention period of 30 days in order to provide the base features
      and functionality of the Cloud API service; for example, retransmissions.
      After 30 days, these features and functionality are no longer available.


      Cloud API does not rely on any information about the user
      (customer/consumer) the business is communicating with other than the
      phone number used to identify the account. This information is used to
      deliver the messages through the WhatsApp client code. User phone numbers
      are used as sources or destinations for individual messages; as such they
      are deleted when messages are deleted. No other part of Meta has access to
      this information.


      Like the On-Premise client, the WhatsApp client code used by Cloud API
      collects messaging information about the business as required by WhatsApp.
      This is information used by WhatsApp to detect malicious activity. No
      message content is shared or sent to WhatsApp at any time and no WhatsApp
      employee has access to any message content.


      | Cloud API Data | System | Available to rest of Meta | Available to
      WhatsApp |

      | --- | --- | --- | --- |

      | Message content | Cloud API | No | No |

      | Consumer phone number | Cloud API | No | Yes |

      | Non-identifiable statistics | Cloud API | Yes | Yes |

      | Integrity signals - per business | WhatsApp Client | No | Yes |

      | Business Information | Business Manager | Yes | Yes |

      | Billing - per business | WhatsApp | Yes | Yes |
  - name: Overview > Data Privacy & Security > Encryption
    description: >-
      With the Cloud API, every WhatsApp message continues to be protected by
      Signal protocol encryption that secures messages before they leave the
      device. This means messages with a WhatsApp business account are securely
      delivered to the destination chosen by each business.  

      <!--

      WhatsApp determines the end-to-end encryption status based on the
      business’s choice of who operates its API endpoint:


      *   Messages with businesses that choose a third-party Business Solution
      Provider to operate the WhatsApp Business API on their behalf are not
      considered end-to-end encrypted as these businesses have chosen to give an
      intermediary access to these messages. This applies to both the Cloud API
      and the on-premise API when working with a BSP.

      *   Messages with businesses that use the WhatsApp Business app or
      directly integrate the Business API on-premise are considered end-to-end
      encrypted as these messages are delivered directly to the business.

      -->    


      For additional details, see [Encryption Overview
      Whitepaper](https://scontent.whatsapp.net/v/t39.8562-34/122249142_469857720642275_2152527586907531259_n.pdf/WA_Security_WhitePaper.pdf?ccb=1-5&_nc_sid=2fbf2a&_nc_ohc=-gqGulAzS8kAX-qgWRK&_nc_ht=scontent.whatsapp.net&oh=040d462095ff61f2f89f06a3f4ff1e90&oe=6131E1D9).


      The Cloud API uses industry standard encryption techniques to protect data
      in transit and at rest. The API uses Graph API for sending messages and
      Webhooks for receiving events, and both operate over industry standard
      HTTPS, protected by TLS.
  - name: Overview > Migration
    description: >-
      **Migrate From On-Premises to Cloud**


      For information on how to migrate from On-Premises to WhatsApp Cloud API,
      see [Migrate from On-Premises API to Cloud
      API](https://developers.facebook.com/docs/whatsapp/cloud-api/guides/migrate-between-on-premises-and-cloud-api#on-premises-to-cloud).


      **Migrate From Cloud to On-Premises**


      For information on how to migrate from WhatsApp Cloud API to On-Premises,
      see [Migrate from Cloud API to On-Premises
      API](hhttps://developers.facebook.com/docs/whatsapp/cloud-api/guides/migrate-between-on-premises-and-cloud-api#cloud-to-on-premises).


      **Migrate Phone Number to a Different WABA**


      For information on how to migrate a registered phone number from one
      WhatsApp Business Account to another, see [Migrate Phone Number to a
      Different
      WABA](https://developers.facebook.com/docs/whatsapp/business-management-api/guides/migrate-phone-to-different-waba).
  - name: Overview > Constraints
    description: >-
      **A single phone number can only be used on one platform at a time. One
      phone number for Cloud API and another number for On-Premise.** This means
      that you cannot use a production phone number with both the On-Premises
      and Cloud APIs. We recommend doing any testing with a test number (either
      an existing test number or a new one) and then moving your production
      phone number to the Cloud API when you’re confident you’re ready for
      production use.
  - name: Get Started
    description: >-
      This guide helps you get started with the WhatsApp Business Platform, and
      is intended for people developing for themselves or their organization,
      not on behalf of a client. At this time, the platform is not open to those
      developing on behalf of clients.


      **NOTE**: All developers must follow [WhatsApp’s Commerce
      Policy](https://www.whatsapp.com/legal/commerce-policy). 


      To send and receive a first message using a test number, complete the
      following steps:
  - name: 'Get Started > Step 1: Set up Developer Assets and Platform Access'
    description: "The\_[WhatsApp Cloud API](https://developers.facebook.com/docs/whatsapp/cloud-api)\_and\_[WhatsApp Business Management API](https://developers.facebook.com/docs/whatsapp/business-management-api)\_are part of Meta’s Graph API, so you need to set up a Meta developer account and a Meta developer app. To set that up:\n\n*   [Register as a Meta Developer](https://developers.facebook.com/apps)\n*   [Enable two-factor authentication for your account](https://www.facebook.com/help/148233965247823)\n*   [Create a Meta App](https://developers.facebook.com/docs/development/create-an-app/): Go to\_**developers.facebook.com**\_>\_**My Apps**\_>\_**Create App**. Select the \"Business\" type and follow the prompts on your screen.\n    \n\nFrom the App Dashboard, click on the app you would like to connect to WhatsApp. Scroll down to find the \"WhatsApp\" product and click\_**Set up**.\n\nNext, you will see the option to select an existing Business Manager (if you have one) or, if you would like, the onboarding process can create one automatically for you (you can customize your business later, if needed). Make a selection and click\_**Continue**.\n\nWhen you click\_**Continue**, the onboarding process performs the following actions:\n\n*   Your App is associated with the Business Manager that you chose, or that was created automatically.\n*   A WhatsApp test phone number is added to your business. You can use this test phone number to explore the WhatsApp Business Platform without registering or migrating a real phone number. Test phone numbers can send unlimited messages to up to 5 recipients (which can be anywhere in the world).\n    \n\nAfter that, your browser navigates to the Getting Started tab, where you can learn about and experiment with the WhatsApp Business Platform. The Getting Started tab contains tools and information to help you send test messages. It can be used with test phone numbers and any of your own phone numbers that you register."
  - name: 'Get Started > Step 2: Send a Test Message'
    description: >-
      In the Getting Started tab:


      1.  Select your test phone number in the From field. (Unless you have
      registered other phone numbers, this will be the only phone number in
      From.)

      2.  Enter the phone number you would like to message in the To field.
      Ensure the number is correct, and that you want to add it to your list of
      5 possible message recipients —as you add phone numbers, follow the
      prompts on the screen to verify you have access to them. Once this number
      has been added, it cannot be removed from your list. Note: This limitation
      is only for WhatsApp-provided test phone numbers. Real phone numbers that
      you register do not have a limit on the number of recipients.

      3.  Once you enter a recipient phone number, the code sample on the page
      will be updated to demonstrate an API call that sends a test message to
      that number. The code sample will look like this:
      
      
      ```

      curl -i -X POST \

      https://graph.facebook.com/{{Version}}/FROM_PHONE_NUMBER_ID/messages \

      -H 'Authorization: Bearer ACCESS_TOKEN' \

      -H 'Content-Type: application/json' \

      -d '{ "messaging_product": "whatsapp", "to": "TO_PHONE_NUMBER", "type":
      "template", "template": { "name": "hello_world", "language": { "code":
      "en_US" } } }'Copy Code


      ```


      4\. Click **Send message** to send the first message. As an alternative,
      you can copy the code sample provided and execute it in your Terminal or
      in Postman. You have just sent a test message!


      The code sample on the page is formatted for use in Unix-style terminal
      shells, and is expected to work on MacOS and distributions of Gnu/Linux.
      If you use Windows, we suggest you perform your first API call using
      Postman, to avoid platform-related cURL formatting concerns. If you are a
      Windows 10 user, cURL is available, but requires a different syntax than
      the one shown in the Getting Started tab to execute in PowerShell or
      cmd.exe. For more information, see [cURL Comes to
      Windows](https://devblogs.microsoft.com/commandline/tar-and-curl-come-to-windows/)
      or [cURL for Windows](https://curl.se/windows/). If you have access to the
      [Windows Subsystem for Linux
      (WSL)](https://docs.microsoft.com/en-us/windows/wsl/about), you can also
      consider launching a Linux distribution and using its terminal.
  - name: 'Get Started > Step 3: Configure a Webhook'
    description: >-
      To get alerted when you receive a message or when a message’s status has
      changed, you need to set up a Webhooks endpoint for your app. Setting up
      Webhooks doesn’t affect the status of your phone number and does interfere
      with you sending or receiving messages.


      To get started, first you need to create the endpoint. You can create a
      custom Webhook URL running on a web server, or use services that help you
      set up an endpoint, such as Glitch. See [Create a Sample App Endpoint for
      Webhooks
      Testing](https://developers.facebook.com/docs/whatsapp/sample-app-endpoints#cloud-api-sample-app-endpoint)
      for help.


      Once your endpoint is ready, go to your App Dashboard.


      In your App Dashboard, find the WhatsApp product and click
      **Configuration**. Then, find the Webhooks section and click **Configure a
      webhook**. After the click, a dialog appears on your screen and asks you
      for two items:


      *   Callback URL: This is the URL Meta will be sending the events. See the
      [Webhooks, Getting
      Started](https://developers.facebook.com/docs/graph-api/webhooks/getting-started)
      guide for information on creating the URL.

      *   Verify Token: This string is set up by you, when you create your
      Webhook endpoint.
      
      
      After adding the information, click **Verify and Save**.


      Back in the App Dashboard, click **WhatsApp** > **Configuration** in the
      left-side panel. Under Webhooks, click **Manage**. A dialog box will open
      with all the objects you can get notified about. To receive messages from
      your users, click **Subscribe** for **messages**.
  - name: 'Get Started > Step 4: Receive a Test Message'
    description: >-
      Now that your Webhook is set up, send a message to the test number you
      have used. You should immediately get a Webhooks notification with the
      content of your message.
  - name: Get Started > Next Steps
    description: >-
      ### Phone Number


      When you’re ready to use your app for a production use case, you need to
      use your own phone number to send messages to your users. When choosing a
      phone number, consider the following:


      *   If you want to use a number that is already being used in the WhatsApp
      customer or business app, you will have to fully migrate that number to
      the business platform. Once the number is migrated, you will lose access
      to the WhatsApp customer or business app. See for information.

      *   We have a set of rules regarding numbers that can be used in the
      platform. .

      *   Once you have chosen your phone number, you have to add it to your
      WhatsApp Business Account. See [How to Connect Your Phone Number to Your
      WhatsApp Business
      Account](https://www.facebook.com/business/help/456220311516626?id=2129163877102343).


      ### Opt-In


      You are required to obtain user opt-in before sending proactive
      business-initiated messages. See [Get Opt-In for
      WhatsApp](https://developers.facebook.com/docs/whatsapp/overview/getting-opt-in)
      for more information.


      ### Pricing & Payment Methods


      Businesses are charged per conversation, which includes all messages
      delivered in a 24 hour session. The first 1,000 conversations each month
      are free. If you want to send more than 1,000 conversations, you need to
      add a credit card to your account.


      For more information see [Pricing and Payment
      Methods](https://developers.facebook.com/docs/whatsapp/getting-started/signing-up#pricing---payment-methods).


      ### Send More Messages


      To send more business-initiated messages, you need to use message
      templates. WhatsApp message templates are specific message formats that
      businesses use to send out notifications or customer care messages to
      people that have opted in to notifications.


      Before sending a message template, you [need to create
      one](https://www.facebook.com/business/help/2055875911147364) or you can
      [use one of our pre-approved
      templates](https://www.facebook.com/business/help/722393685250070). Check
      [this
      guide](https://developers.facebook.com/docs/whatsapp/cloud-api/guides/send-message-templates)
      to learn how to send message templates.


      Incoming messages are unlimited, but there are limits for outgoing
      messages. See [Messaging
      Limits](https://developers.facebook.com/docs/whatsapp/api/rate-limits/#messaging)
      for more information on messaging tiers.
  - name: Get Started for BSPs
    description: >-
      <!--At this time, this API is only available to Business Solution
      Providers (BSPs) and existing direct developers.-->


      This guide goes over the steps Business Solution Providers (BSP) need to
      take in order to offer the Cloud API to their customers. There are 4 main
      stages:


      1.  [Prepare &
      Plan](https://developers.facebook.com/docs/whatsapp/cloud-api/get-started#prepare-plan)

      2.  [Set up
      Assets](https://developers.facebook.com/docs/whatsapp/cloud-api/get-started#set-up-assets)

      3.  [Sign
      Contracts](https://developers.facebook.com/docs/whatsapp/cloud-api/get-started#sign-contracts)

      4.  [Build
      Integration](https://developers.facebook.com/docs/whatsapp/cloud-api/get-started#build-integration)
      
      
      After you’re done, please [keep up with monthly
      updates](https://developers.facebook.com/docs/whatsapp/cloud-api/get-started#keep-up-monthly-updates).
  - name: Get Started for BSPs > Prepare and Plan
    description: >-
      ### Read Documentation


      Before you start, we recommend reading through our [developer
      documentation](https://developers.facebook.com/docs/whatsapp/cloud-api)
      and our [Postman
      collection](https://documenter.getpostman.com/view/13382743/UVC5FTHT?fbclid=IwAR1ZHbYefEkctmotxeooOM9ZV9U5yiWsD4fh64RC-QihuKgDDurd15J6ZR0).
      This helps you understand how the Cloud API works, including how to get
      started and migrate numbers.


      ### Plan Onboarding & Migration


      **You must use Embedded Signup to onboard new customers to the Cloud
      API.** If you haven’t already, integrate and launch [Embedded
      Signup](https://developers.facebook.com/docs/whatsapp/embedded-signup).
      Embedded Signup is the fastest and easiest way to register customers,
      enabling them to start sending messages in less than five minutes.


      Next, **think about which clients you want to migrate to the Cloud API
      first**. Our general recommendation is to migrate all of your clients from
      the On-Premises to the Cloud API, but each client’s need may vary. As you
      think about which clients to migrate, consider:


      | Consideration | More Context |

      | --- | --- |

      |   <br>Are my client’s throughputs and message volumes supported by Cloud
      API?  <br>  <br> |   <br>The Cloud API supports most businesses at 80
      messages/second cumulative peak throughput, including text/media and
      ingoing/outgoing.  <br>  <br> |

      |   <br>Are my client’s compliance needs met by the Cloud API?  <br> |  
      <br>The Cloud API is GDPR compliant and has SOC 2 certification. Servers
      are hosted in North America.  <br>  <br> |

      |   <br>Are my clients using features supported by the Cloud API?  <br> 
      <br> |   <br>Most major features are supported. See full list
      [here](https://developers.facebook.com/docs/whatsapp/cloud-api/overview/on-premises-cloud-api-comparison#messaging-features).
      |


      Once you know who’s going to be migrated, you can build a migration plan
      and timeline.


      As you create your plan, remember to design your system for two scenarios:
      onboarding new customers and migrating current customers from On-Premises
      to Cloud API. For the migration scenario, include plans to backup your
      current On-Premises instance and migrate those numbers to the Cloud API.


      ### Plan Communication With Clients


      First, you need to decide whether to notify existing clients about
      migration. Then, you should determine if you need to create or update any
      documentation to support the Cloud API setup.


      ### Make Pricing Decisions


      Since the hosting costs for the Cloud API are covered by Meta, you should
      decide if you would like to update your prices accordingly.
  - name: Get Started for BSPs > Set up Assets
    description: >-
      To use the Cloud API, BSPs need to have the following assets:


      | Asset | Specific Instructions |

      | --- | --- |

      |   <br>  <br>**Business Manager**  <br>  <br> |   <br>  <br>You can use
      an existing, or [set up a new
      one](https://www.facebook.com/business/help/1710077379203657). Save the
      Business Manager ID.  <br>  <br> |

      |   <br>  <br>**WhatsApp Business Account** (WABA)  <br>  <br> |   <br> 
      <br>See [Create a WhatsApp Business Account for the WhatsApp Business
      API](https://www.facebook.com/business/help/2087193751603668) for help. 
      <br>  <br> |

      |   <br>  <br>[**Meta App**](https://developers.facebook.com/apps/)  <br> 
      <br> |   <br>  <br>If you don’t have an app, you need to [create
      one](https://developers.facebook.com/docs/development/create-an-app) with
      the “Business” type. Remember to add a display name and a contact email to
      your app.  <br>  <br>  <br>  <br>As a BSP (Business Solution Provider),
      your app must go through [App
      Review](https://developers.facebook.com/docs/app-review) and request
      Advanced Access to the following permissions:  <br>  <br>*
      [`whatsapp_business_management`](https://developers.facebook.com/docs/permissions/reference/whatsapp_business_management)
      — Used to manage phone numbers, message templates, registration, business
      profile under a WhatsApp Business Account. To get this permission, your
      app must go through [App
      Review](https://developers.facebook.com/docs/app-review).  <br>*
      `whatsapp_business_messaging` — Used to send/receive messages from
      WhatsApp users, upload/download media under a WhatsApp Business Account.
      To get this permission, your app must go through [App
      Review](https://developers.facebook.com/docs/app-review).  <br>*
      `business_management`  <br>  <br>[See a sample App Review submission
      here](https://developers.facebook.com/docs/app-review/resources/sample-submissions/whatsapp-business-api). 
      <br>  <br>  <br>  <br>As a BSP, you can also feel free to use the same
      Meta app across different clients and WABAs. But be aware that each app
      can only have one webhook endpoint and each app needs to go through App
      Review.  <br>  <br> |

      |   <br>  <br>**System User**  <br>  <br> |   <br>  <br>See [Add System
      Users to Your Business
      Manager](https://www.facebook.com/business/help/503306463479099) for
      help.  <br>  <br>  <br>  <br>Currently, a Meta App with
      `whatsapp_business_messaging`, `whatsapp_business_management`, and
      `business_messaging` permissions has access to up to:  <br>  <br>* 1 admin
      system user, and  <br>* 1 employee system user  <br>  <br>We recommend
      using the admin system user for your production deployment. See [About
      Business Manager Roles and
      Permissions](https://www.facebook.com/business/help/442345745885606) for
      more information.  <br>  <br> |

      |   <br>  <br>**Business Phone Number**  <br>  <br> |   <br>  <br>This is
      the phone number the business will use to send messages. Phone numbers
      need to be verified through SMS/voice call.  <br>  <br>  <br>  <br>For
      BSPs and Direct Businesses: If you wish to use your own number, then you
      should [add a phone
      number](https://www.facebook.com/business/help/456220311516626) in
      WhatsApp Manager and verify it with the verify endpoint via [Graph
      API](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/phone-numbers#verify). 
      <br>  <br>  <br>  <br>For Businesses using BSPs: If you wish to use your
      own number, then you should add and verify their numbers using the BSP’s
      [Embedded Signup
      flow](https://developers.facebook.com/docs/whatsapp/embedded-signup). 
      <br>  <br>  <br>The verification status of a phone number doesn't impact
      the migration between On-Premises and Cloud API. If you don't have access
      to Embedded Signup to verify phone numbers, we recommend verifying the
      phone numbers using the On-Premises solution, and then migrating those
      numbers to the Cloud API.  <br>  <br>There is no limit to the amount of
      business phone numbers that can be onboarded to the Cloud API.  <br> 
      <br>  <br>Only one phone number can be used on a platform at a time: One
      for [Cloud API](https://developers.facebook.com/docs/whatsapp/cloud-api)
      and another for
      [On-Premises](https://developers.facebook.com/docs/whatsapp/on-premises).
      This means that you cannot use a production phone number with both the
      On-Premises and Cloud APIs. We recommend doing any testing with a test
      number (either an existing test number or a new one) and then moving your
      own phone number to the Cloud API when you’re confident you’re ready for
      production use.  <br>  <br> |

      |   <br>  <br>**Consumer Phone Number**  <br>  <br> |   <br>  <br>This is
      a phone number that is currently using the consumer WhatsApp app. This
      number will be receiving the messages sent by your business phone number. 
      <br>  <br> |
  - name: Get Started for BSPs > Sign Contracts
    description: >-
      ### Accepting Terms of Service


      In order to access the WhatsApp Business Messaging Cloud API you need to
      first accept the WhatsApp Business Platform Terms of Service on behalf of
      your business.


      To do so, navigate to [WhatsApp
      Manager](https://business.facebook.com/wa/manage/insights) and accept the
      terms of service in the informational banner.

      <!--

      ![](https://scontent-sea1-1.xx.fbcdn.net/v/t39.8562-6/278029604_1023061871635518_1209334055945847333_n.png?_nc_cat=101&_nc_map=test-rt&ccb=1-6&_nc_sid=6825c5&_nc_ohc=qX1VCDz2U08AX_zk9NK&_nc_ht=scontent-sea1-1.xx&oh=00_AT_knfH2QFVIQd1n5FSZ7O5D6tpKKJYr5Ifqrx1-yY3uBw&oe=628391E4)

      -->


      If you are an existing beta partner for the Cloud API you have a grace
      period of 90 days. This means you need to accept the terms before July 5,
      2022 or you will lose access.


      For any new Cloud API businesses, including those migrating from the
      on-premises API, you will need to accept terms of service before you can
      start using the Cloud API. Registration calls will fail until you accept
      the terms of service.


      ***NOTE: You as a developer need to accept the terms of service. If you
      are a Business Solution Provider, you do not need your customers to
      accept.***
  - name: Get Started for BSPs > Build Integration
    description: >-
      ### Step 1: Get System User Access Token


      Graph API calls use access tokens for authentication. For more
      information, see [Access
      Tokens](https://developers.facebook.com/docs/facebook-login/access-tokens/).
      We recommend using your system user to generate your token.


      To generate a system user access token:


      1.  Go to [Business Manager](https://business.facebook.com/) > Business
      Settings > Users > System Users to view the system user you created.

      2.  Click on that user and select Add Assets. This action launches a new
      window.

      3.  Under Select Asset Type on the left side pane, select Apps. Under
      Select Assets, choose the Meta app you want to use (your app must have the
      correct permissions). Enable Develop App for that app.

      4.  Select Save Changes to save your settings and return to the system
      user main screen.

      5.  Now you are ready to generate your token. In the system user main
      screen, click Generate Token and select your Meta app. After selecting the
      app, you see a list of available permissions. Select
      `whatsapp_business_management`, `whatsapp_business_messaging`, and
      `business_management`. Click Generate Token.

      6.  A new window opens with your system user, assigned app and access
      token. Save your token.

      7.  Optionally, you can click on your token and see the Token Debugger. In
      your debugger, you should see the two permissions you have selected. You
      can also directly paste your token into the [Access Token
      Debugger](https://developers.facebook.com/tools/debug/accesstoken).
      
      
      ### Step 2: Set up Webhooks


      With Webhooks set up, you can receive real-time HTTP notifications from
      the WhatsApp Business Platform. This means you get notified when, for
      example, you get a message from a customer or there are changes to your
      WhatsApp Business Account (WABA).


      To set up your Webhook, you need to create an internet-facing web server
      with a URL that meets Meta’s and WhatsApp’s requirements. See [Creating an
      Endpoint](https://developers.facebook.com/docs/graph-api/webhooks/getting-started/#create-endpoint)
      for instructions on how to do that. If you need an endpoint for testing
      purposes, [you can generate a test Webhooks
      endpoint](https://developers.facebook.com/docs/whatsapp/api/webhooks/generate-endpoint).


      #### App Setup


      Once the endpoint is ready, configure it to be used by your Meta app:


      In your App Dashboard, find the WhatsApp product and click
      **Configuration**. Then, find the webhooks section and click **Configure a
      webhook**. After the click, a dialog appears on your screen and asks you
      for two items:


      *   Callback URL: This is the URL Meta will be sending the events to. See
      the [Webhooks, Getting
      Started](https://developers.facebook.com/docs/graph-api/webhooks/getting-started)
      guide for information on creating the URL.

      *   Verify Token: This string is set up by you, when you create your
      webhook endpoint.
      
      
      After adding the information, click **Verify and Save**.


      Back in the App Dashboard, click **WhatsApp** > **Configuration** in the
      left-side panel. Under Webhooks, click **Manage**. A dialog box will open
      with all the objects you can get notified about. To receive messages from
      your users, click **Subscribe** for **messages**.


      You only need to set up Webhooks once for every application you have. You
      can use the same Webhook to receive multiple event types from multiple
      WhatsApp Business Accounts. For more information, see our Webhooks
      section.


      At any time, each Meta App can have only one endpoint configured. If you
      need to send your webhook updates to multiple endpoints, you need multiple
      Meta Apps.


      ### Step 3: Subscribe to your WABA


      To make sure you get notifications for the correct account, subscribe your
      app:


      ```

      curl -X POST \
        'https://graph.facebook.com/{{Version}}/WHATSAPP_BUSINESS_ACCOUNT_ID/subscribed_apps' \
        -H 'Authorization: Bearer ACCESS_TOKEN'

      ```


      [Copy
      Code](https://developers.facebook.com/docs/whatsapp/cloud-api/get-started#)


      If you get the response below, all Webhook events for the phone numbers
      under this account will be sent to your configured Webhooks endpoint.


      ```

      {
        "success": "true"
      }


      ```


      ### Step 4: Get Phone Number ID


      To send messages, you need to register the phone number you want to use
      —this is the business phone number we mentioned in [Before You
      Start](https://developers.facebook.com/docs/whatsapp/cloud-api/get-started#before-you-start).


      Before you can proceed to registration, you need to find that phone
      number’s ID. To get your phone number’s ID, make the following API call:


      ```

      curl -X GET \
       'https://graph.facebook.com/{{Version}}/WHATSAPP_BUSINESS_ACCOUNT_ID/phone_numbers' \
       -H 'Authorization: Bearer ACCESS_TOKEN'

      ```


      [Copy
      Code](https://developers.facebook.com/docs/whatsapp/cloud-api/get-started#)


      If the request is successful, the response includes all phone numbers
      connected to your WABA:


      ```

      {
        "data": [
          {
            "verified_name": "Jasper's Market",
            "display_phone_number": "+1 631-555-5555",
            "id": "1906385232743451",
            "quality_rating": "GREEN"
          },
          {
            "verified_name": "Jasper's Ice Cream",
            "display_phone_number": "+1 631-555-5556",
            "id": "1913623884432103",
            "quality_rating": "NA"
          }
        ]
      }


      ```


      Save the ID for the phone number you want to register. See [Read Phone
      Numbers](https://developers.facebook.com/docs/whatsapp/business-management-api/phone-numbers)
      for more information about this endpoint.


      #### Migration Exception


      If you are migrating a phone number from the On-Premises API to the Cloud
      API, there are extra steps you need to perform before registering a phone
      number with the Cloud API. See [Migrate Between On-Premises and Cloud
      API](https://developers.facebook.com/docs/whatsapp/cloud-api/guides/migrate-between-on-premises-and-cloud-api)
      for the full process.


      ### Step 5: Register Phone Number


      With the phone number’s ID in hand, you can register it. In the
      registration API call, you perform two actions at the same time:


      1.  Register the phone.

      2.  [Enable two-step
      verification](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/two-step-verification)
      by setting a 6-digit registration code —you must set this code on your
      end. Save and memorize this code as it can be requested later. **Setting
      up two-factor authentication is a requirement to use the Cloud API.**
      
      
      Sample request:


      ```

      curl -X POST \
        'https://graph.facebook.com/{{Version}}/FROM_PHONE_NUMBER_ID/register' \
        -H 'Authorization: Bearer ACCESS_TOKEN' \
        -d '{
          "messaging_product": "whatsapp",
          "pin": "6_DIGIT_PIN"
        }'

      ```


      [Copy
      Code](https://developers.facebook.com/docs/whatsapp/cloud-api/get-started#)


      Sample response:


      ```

      {
        "success": "true"
      }


      ```


      #### Embedded Signup Users


      A phone number **must** be registered up to 14 days after going through
      the Embedded Signup flow. If a number is not registered during that
      window, the phone must go through to the Embedded Signup flow again prior
      to registration.


      ### Step 6: Receive a Message From Consumer App


      Once participating customers send a message to your business, you get **24
      hours of free messages with them** —that window of time is called the
      customer service window. For testing purposes, we want to enable this
      window, so you can send as many messages as you would like.


      From a personal WhatsApp iOS/Android app, send a message to the phone
      number you just registered. Once the message is sent, you should receive
      an incoming message to your Webhook with a notification in the following
      format.


      ```

      {
        "object": "whatsapp_business_account",
        "entry": [
          {
            "id": "WHATSAPP_BUSINESS_ACCOUNT_ID",
            "changes": [
              {
                "value": {
                  "messaging_product": "whatsapp",
                  "metadata": {
                    "display_phone_number": "16315551234",
                    "phone_number_id": "PHONE_NUMBER_ID"
                  },
                  "contacts": [
                    {
                      "profile": {
                        "name": "Kerry Fisher"
                      },
                      "wa_id": "16315555555"
                    }
                  ],
                  "messages": [
                    {
                      "from": "16315555555",
                      "id": "wamid.ABGGFlA5FpafAgo6tHcNmNjXmuSf",
                      "timestamp": "1602139392",
                      "text": {
                        "body": "Hello!"
                      },
                      "type": "text"
                      }
                  ]
                },
              "field": "messages"
              }
            ]
          }
        ]
      }


      ```


      ### Step 7: Send a Test Message


      Once you have enabled the customer service window, you can send a test
      message to the consumer number you used in the previous step. To do that,
      make the following API call:


      ```

      curl -X  POST \
        'https://graph.facebook.com/{{Version}}/FROM_PHONE_NUMBER_ID/messages' \
        -H 'Authorization: Bearer ACCESS_TOKEN' \
        -d '{
            "messaging_product": "whatsapp", 
            "to": "16315555555",
            "text": {"body" : "hello world!"}
        }'

      ```


      [Copy
      Code](https://developers.facebook.com/docs/whatsapp/cloud-api/get-started#)


      If your call is successful, your response will include a message ID. Use
      that ID to track the progress of your messages via Webhooks.


      Sample response:


      ```

      {
          "id":"wamid.gBGGFlaCGg0xcvAdgmZ9plHrf2Mh-o"
      }


      ```


      With the Cloud API, there is no longer a way to explicitly check if a
      phone number has a WhatsApp ID. To send someone a message using the Cloud
      API, just send it directly to the customer's phone number —after they have
      [opted-in](https://developers.facebook.com/docs/whatsapp/overview/getting-opt-in).
      See [Reference,
      Messages](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages#examples)
      for examples.
  - name: 'Get Started for BSPs > Step 1: Get System User Access Token'
    description: >-
      Graph API calls use access tokens for authentication. For more
      information, see [Access
      Tokens](https://developers.facebook.com/docs/facebook-login/access-tokens/).
      We recommend using your system user to generate your token.


      To generate a system user access token:


      1.  Go to [Business Manager](https://business.facebook.com/) > Business
      Settings > Users > System Users to view the system user you created.

      2.  Click on that user and select Add Assets. This action launches a new
      window.

      3.  Under Select Asset Type on the left side pane, select Apps. Under
      Select Assets, choose the Meta app you want to use (your app must have the
      correct permissions). Enable Develop App for that app.

      4.  Select Save Changes to save your settings and return to the system
      user main screen.

      5.  Now you are ready to generate your token. In the system user main
      screen, click Generate Token and select your Meta app. After selecting the
      app, you see a list of available permissions. Select
      `whatsapp_business_management`, `whatsapp_business_messaging`, and
      `business_management`. Click Generate Token.

      6.  A new window opens with your system user, assigned app and access
      token. Save your token.

      7.  Optionally, you can click on your token and see the Token Debugger. In
      your debugger, you should see the two permissions you have selected. You
      can also directly paste your token into the [Access Token
      Debugger](https://developers.facebook.com/tools/debug/accesstoken).
  - name: 'Get Started for BSPs > Step 2: Set up Webhooks'
    description: >-
      With Webhooks set up, you can receive real-time HTTP notifications from
      the WhatsApp Business Platform. This means you get notified when, for
      example, you get a message from a customer or there are changes to your
      WhatsApp Business Account (WABA).


      To set up your Webhook, you need to create an internet-facing web server
      with a URL that meets Meta’s and WhatsApp’s requirements. See [Creating an
      Endpoint](https://developers.facebook.com/docs/graph-api/webhooks/getting-started/#create-endpoint)
      for instructions on how to do that. If you need an endpoint for testing
      purposes, [you can generate a test Webhooks
      endpoint](https://developers.facebook.com/docs/whatsapp/api/webhooks/generate-endpoint).


      #### App Setup


      Once the endpoint is ready, configure it to be used by your Meta app:


      In your App Dashboard, find the WhatsApp product and click
      **Configuration**. Then, find the webhooks section and click **Configure a
      webhook**. After the click, a dialog appears on your screen and asks you
      for two items:


      *   Callback URL: This is the URL Meta will be sending the events to. See
      the [Webhooks, Getting
      Started](https://developers.facebook.com/docs/graph-api/webhooks/getting-started)
      guide for information on creating the URL.

      *   Verify Token: This string is set up by you, when you create your
      Webhook endpoint.
      
      
      After adding the information, click **Verify and Save**.


      Back in the App Dashboard, click **WhatsApp** > **Configuration** in the
      left-side panel. Under Webhooks, click **Manage**. A dialog box will open
      with all the objects you can get notified about. To receive messages from
      your users, click **Subscribe** for **messages**.


      You only need to set up Webhooks once for every application you have. You
      can use the same Webhook to receive multiple event types from multiple
      WhatsApp Business Accounts. For more information, see our Webhooks
      section.


      At any time, each Meta App can have only one endpoint configured. If you
      need to send your Webhook updates to multiple endpoints, you need multiple
      Meta Apps.
  - name: Guides
    description: >-
      These guides walk through various tasks you can accomplish with the
      WhatsApp Business Cloud API.
  - name: Guides > Mark Messages as Read
    description: >-
      When you receive an incoming message from Webhooks, you can use the
      `/messages` endpoint to change the status of it to read. We recommend
      marking incoming messages as read within 30 days of receipt.


      You cannot mark outgoing messages you sent as read.


      ## Step 1: Obtain `message_id` of incoming message


      First, find the `message_id` for the message you want to mark as `read`.
      You can find this ID in the webhooks notification you get when you receive
      a message. See
      [Webhooks](https://developers.facebook.com/docs/whatsapp/cloud-api/webhooks)
      for information.


      ## Step 2: Make API call to update message status


      Call the `/PHONE_NUMBER_ID/messages` endpoint and include your
      `message_id`. Set the `status` field to `read`:


      ``` json

      curl -X  POST \
       'https://graph.facebook.com/{{Version}}/FROM_PHONE_NUMBER_ID/messages' \
       -H 'Authorization: Bearer SYSTEM_USER_ACCESS_TOKEN' \
       -d '{
        "messaging_product": "whatsapp",
        "status": "read",
        "message_id": "MESSAGE_ID"
        }
      }'    


      ```


      A successful response looks like this:


      ``` json

      {
        "success": true
      }


      ```


      For more information on marking messages as read, see [Mark Messages as
      Read](https://documenter.getpostman.com/view/13382743/UVC5FTHT#b481139d-c887-40ec-8c07-732d1b69d468)
      in the Cloud API reference.
  - name: Guides > Migrate Between On-Premise and Cloud API
    description: >-
      This guide walks you through the process of migrating between On-Premises
      and Cloud API.


      *   [Migrate from On-Premises API to Cloud
      API](#c2070ecb-9bf6-41c8-8452-7209c7820254)

      *   [Migrate from Cloud API to On-Premises
      API](#46bb6f38-12f5-417f-af0b-729c08c027fe)
  - name: >-
      Guides > Migrate Between On-Premise and Cloud API > On-Premise to Cloud
      API
    description: >-
      To migrate from On-Premises to Cloud API, follow these steps:


      **Optional Step 0: Verify Phone Numbers**


      *(This step is only relevant if you don’t have access to Embedded Signup
      to verify phone numbers. If that doesn’t apply to you, move to Step 1.)*


      The verification status of a phone number doesn't impact the migration
      between On-Premises and Cloud API. If you don't have access to Embedded
      Signup to verify phone numbers, we recommend verifying the phone numbers
      using the On-Premises solution, and then migrating those numbers to the
      Cloud API.


      **Step 1: Select Best Time for Migration**


      We recommend performing migration during a maintenance window while
      traffic to the On-Premises deployment is low/turned off. Downtime is
      typically less than 5 minutes, and no re-verification of the phone number
      is required.


      **Step 2: Backup On-Premises Content**


      We don’t provide full database migration, so you must back up your data
      before moving a phone number from On-Premises to Cloud API. Before
      starting the backup, make sure you are in single instance mode and not
      multi-connect.


      Once you are ready, use the On-Premises [Backup
      API](https://developers.facebook.com/docs/whatsapp/api/settings/backup-and-restore/):


      ``` json

      POST /v1/settings/backup  

      {  
          "password": "your-password"  
      }


      ```


      A successful response looks like this:


      ``` json

      {  
          "settings": 
          {  
            "data": "encrypted-backup-data"  
          }  
      }


      ```


      Save the data for the next step.


      **Step 3: Call /register to Start Migration**


      To migrate your account, make a **POST** call to the
      **`PHONE_NUMBER_ID/register`** endpoint. Inside the backup object, include
      the backup data obtained during the previous step:


      ``` bash

      `curl -X POST \
      'https://graph.facebook.com/{{Version}}/FROM_PHONE_NUMBER_ID/register' \

      -H 'Authorization: Bearer SYSTEM_USER_ACCESS_TOKEN' \   

      -d '{   
          "messaging_product": "whatsapp",
          "pin": "6_DIGIT_PIN",
          "backup": 
          {   
              "password": "PASSWORD",   
              "data": "BACKUP_DATA"   
          }   
      }'


      ```


      A successful response looks like this:


      ``` json

      {  
        "success": "true"  
      }


      ```


      See all available fields for this endpoint
      [here](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/account-migration#parameters).


      **Step 4: Prepare to Send Messages**


      You have been migrated to the Cloud API. But, before sending messages, you
      should perform necessary operations, like [re-uploading media
      files](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/media)
      you want to send. Be aware that data (messages, media, etc.) received on
      the On-Premises API deployment before migration won’t be available in the
      Cloud API after migration.


      **Step 5: Start Sending Messages**


      You are ready to send messages to your customers. See the [/messages
      endpoint
      documentation](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages)
      for guidance.
  - name: >-
      Guides > Migrate Between On-Premise and Cloud API > Cloud API to
      On-Premise
    description: >-
      To migrate from Cloud API to On-Premises API, follow these steps:


      **Step 1: Prepare for Migration**


      We suggest that you stop sending messages while you complete the
      migration.


      The WhatsApp Business API On-Premises client has certain network
      requirements for connecting to the WhatsApp servers. To make sure you are
      ready, check [Set Up and Debug Your
      Network](https://developers.facebook.com/docs/whatsapp/guides/network-requirements).


      **Step 2: Register API Client**


      To move from Cloud API to On-Premises you need to register your WhatsApp
      Business API client. To do that, call the
      [**`/account`**](https://developers.facebook.com/docs/whatsapp/api/account)
      endpoint:


      ``` json

      POST /v1/account  

      {  
          "cc": "<your-country-code>",  
          "phone_number": "<your-phone-number-without-country-code>",  
          "method": "<sms-or-voice>",  
          "cert": "<your-verified-name-cert-in-base64>",  
          "pin": "<your-existing-6-digit-pin>"
      }


      ```


      Depending on the response received, the registration procedure can be
      considered complete or require another step to complete. If successful,
      you receive one of the following HTTP status codes. Follow the
      instructions that match the response you received:


      *   **201 Created** — The account already exists. You are already
      registered, so you do not need to do anything else.

      *   **202 Accepted** — The account does not exist. Depending on the method
      selected in the request, check your SMS or voice number for the
      registration code. This response will include a returned payload that
      contains the **`vname`** decoded from the cert parameter for you to
      confirm the right display name is being set. If correct, proceed to
      [Completing Your Account
      Registration](https://developers.facebook.com/docs/whatsapp/api/account/verify)
      to complete registration.
      
      
      See all available fields for this endpoint
      [here](https://developers.facebook.com/docs/whatsapp/api/account#parameters).


      **Step 3: Set Shards**


      Once your client is registered, you can [set
      shards](https://developers.facebook.com/docs/whatsapp/multiconnect_mc), if
      needed.


      **Step 4: Start Sending Messages**


      You are ready to send messages to your customers. For more information,
      see
      [**`/messages`**](https://developers.facebook.com/docs/whatsapp/guides/messages)
      endpoint documentation.
  - name: Guides > Sell Products and Services
    description: >-
      Businesses using the WhatsApp Business API can showcase and share their
      products and services with customers for them to browse items and add to a
      cart without leaving the chat. To learn more about products and services,
      see [Sell Products &
      Services](https://developers.facebook.com/docs/whatsapp/cloud-api/guides/sell-products-and-services).
  - name: API Reference
    description: >-
      This section explores the full list of WhatsApp Business Cloud API
      reference. *At this time, this API is only available to Business Solution
      Providers (BSPs) and existing direct developers.*


      This is a list of root nodes and edges available for the WhatsApp Business
      API. See [Using the Graph
      API:Nodes](https://developers.facebook.com/docs/graph-api/overview#nodes)
      for more information on how the API is structured.


      ## Main Root Nodes


      | Node | Description |

      | --- | --- |

      | **`/PHONE_NUMBER_ID`** | Represents a specific phone number. This
      endpoint is used to [set up two-factor
      authentication](#fc57a30c-97e0-4e06-b74b-89fd7fc5f783). |

      | **`/MEDIA_ID`** | Represents a specific media object. Use this endpoint
      to get and delete media objects. |

      | **`/MEDIA_URL`** | Represents a specific media URL. Use this endpoint to
      download media from a URL. |


      ## Phone Number ID


      The **`/PHONE_NUMBER_ID`** endpoint has the following edges:


      | Edge | Description |

      | --- | --- |

      | **`/PHONE_NUMBER_ID/register`** | Used to [register a phone
      number](#149d8034-dca8-4bce-827e-06244127b4b7) or to migrate WhatsApp
      Business Accounts from a current On-Premises deployment to the new
      Cloud-Based API. |

      | **`/PHONE_NUMBER_ID/deregister`** | Used to [deregister a phone
      number](#8f0c509c-ec45-44fb-bfcc-38417ce88e97). |

      | **`/PHONE_NUMBER_ID/whatsapp_business_profile`** | Used to [get and
      update a business' profile](#9bfce27c-ed1f-44b5-82df-b0508210e6be). |

      | **`/PHONE_NUMBER_ID/media`** | Used to [upload
      media](#39a02bc0-ede1-4848-b24e-4ac3d501aaea). |

      | **`/PHONE_NUMBER_ID/messages`** | Used to [send
      messages](#1f4f7644-cc97-40b5-b8e4-c19da268fff1). |

      | **`/PHONE_NUMBER_ID/request_code`** | Used to [request a code to verify
      a phone](#6d413167-648e-40d0-823a-479ec98a2e33) number's ownership. |

      | **`/PHONE_NUMBER_ID/verify_code`** | Used to [verify a phone number's
      ownership](#1426eb2d-3ff2-4cc7-9021-c8782672e151). |
  - name: API Reference > Registration
    description: >-
      You need to register your phone number in the following scenarios:


      *   Account Creation: When you implement this API, you need to register
      the phone number you want to use to send messages. We enforce [setting
      two-step verification](#fc57a30c-97e0-4e06-b74b-89fd7fc5f783) during
      account creation to add an extra layer of security of your accounts.

      *   Name Change: In this case, your phone is already registered and you
      want to change your display name. To do that, you must first [file for a
      name change on WhatsApp
      Manager](https://www.facebook.com/business/help/378834799515077). Once the
      name is approved, you need to register your phone again under the new
      name.
      
      
      Before registering your phone, you need to verify that you own that phone
      number with a SMS or voice code. For details, see [Verify Phone
      Ownership](https://developers.facebook.com/docs/whatsapp/business-management-api/guides/migrate-phone-to-different-waba#step-2--verify-phone-ownership).


      In case you would like to remove your phone from the Cloud API, you can
      deregister a phone. This can be used in cases where you want to move to
      the On-Premises API or you want to use your phone number in the regular
      WhatsApp customer app. You can always reregister your phone with Cloud API
      later by repeating the registration process.


      **You set up** [**two-factor
      verification**](#fc57a30c-97e0-4e06-b74b-89fd7fc5f783) **and** [**register
      a phone number**](#b22af3db-9d13-4467-a7a6-4026f71984cb) **in the same API
      call.**


      #### Reminders


      *   To use these endpoints, you need to authenticate yourself with a
      system user access token with the **`whatsapp_business_messaging`**
      permission.

      *   If you need to find your phone number ID, see [Get Phone Number
      ID](#c72d9c17-554d-4ae1-8f9e-b28a94010b28).
  - name: API Reference > Account Migration
    description: >-
      Use the **`/{{Phone-Number-ID}}/register`** endpoint to migrate your
      WhatsApp Business Accounts from your current on-premise deployment to the
      new Cloud-Based API. 


      #### Reminders


      * To use this endpoint, you need to authenticate yourself with a system
      user access token with the **`whatsapp_business_management`** permission.


      * If you need to find your phone number ID, see [Get Phone Number
      ID](#c72d9c17-554d-4ae1-8f9e-b28a94010b28).
  - name: API Reference > Business Compliance
  - name: API Reference > Business Profiles
    description: >-
      To complete the following API calls, you need to get a business profile
      ID. To do that, make a **GET** call to the **`/{{Phone-Number-ID}}`**
      endpoint and add `business_profile` as a URL field. Within the
      **`business_profile`** request, you can specify what you want to know from
      your business.


      #### Reminders


      * To use this endpoint, you need to authenticate yourself with a system
      user access token with the **`whatsapp_business_management`** permission.
  - name: API Reference > Media
    description: >-
      You can use the following endpoints to upload, retrieve, or delete media:


      | Endpoint       | Uses |

      | ----------- | ---------- |

      | [POST /{phone-number-ID}/media]() | Upload media. |

      | [GET /{media-ID}]() | Retrieve the URL for a specific media item. |

      | [DELETE /{media-ID}]() | Delete a specific media item. |

      | [GET /{media-URL}]() | Download media from a media URL. |


      #### Reminders


      * To use these endpoints, you need to authenticate yourself with a system
      user access token with the **`whatsapp_business_messaging`** permission.

      * If you need to find your phone number ID, see [Get Phone Number
      ID](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/phone-numbers).

      * If you need to find your media URL, see [Retrieve Media
      URL](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/media#download-media).


      #### Support Media Types

      | Media       | Supported File Type(s) | Size Limit |

      | ----------- | ----------------------- | ---------- |

      | `audio`       |
      <ul><li>`audio/aac`</li><li>`audio/mp4`</li><li>`audio/mpeg`</li><li>`audio/amr`</li><li>`audio/ogg`</li></ul><br>
      **Note**: only opus codecs, base audio/ogg is not supported | 16MB |

      | `document`    |
      <ul><li>`text/plain`</li><li>`application/pdf`</li><li>`application/vnd.ms-powerpoint`</li><li>`application/msword`</li><li>`application/vnd.ms-excel`</li><li>`application/vnd.openxmlformats-officedocument.wordprocessingml.document`</li><li>`application/vnd.openxmlformats-officedocument.presentationml.presentation`</li><li>`application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`</li></ul>
      | 100MB |

      | `image` | <ul><li>`image/jpeg`</li><li>`image/png`</li></ul> | 5MB |

      | `sticker` | <ul><li>`image/webp`</li></ul> | 100KB |

      | `video` |
      <ul><li>`video/mp4`</li><li>`video/3sp`</li></ul><br/>**Notes**:<ul><li>Only
      H.264 video codec and AAC audio codec is supported.</li><li>We support
      videos with a single audio stream or no audio stream.</li><ul> | 16MB |



      #### Get Media ID

      To complete some of the following API calls, you need to have a media ID.
      There are two ways to get this ID:


      * **From the API call**: Once you have successfully uploaded media files
      to the API, the media ID is included in the response to your call.

      * **From Webhooks**: When a business account receives a media message, it
      downloads the media and uploads it to the Cloud API automatically. That
      event triggers the Webhooks and sends you a notification that includes the
      media ID.
  - name: API Reference > Messages
    description: >-
      <!-- 

      You can use this API to send text messages, media, and message templates
      to your customers. To send a message, create a **Message** object. Each
      message is identified by a unique ID. You can also mark an incoming
      message as read through the `/messages` endpoint. You can track message
      status with Webhooks by ID. 

      -->


      Use the **`/{{Phone-Number-ID}}/messages`** endpoint to send text
      messages, media (audio, documents, images, and video), and message
      templates to your customers. For more information relating to the messages
      you can send, see [Messages](#1f4f7644-cc97-40b5-b8e4-c19da268fff1).


      Messages are identified by a unique ID. You can track message status in
      the Webhooks through its ID. You could also mark an incoming message as
      read through the **`/{{Phone-Number-ID}}/messages`** endpoint.


      ## Prerequisites


      *   [User Access
      Token](https://developers.facebook.com/docs/facebook-login/access-tokens#usertokens)
      with **`whatsapp_business_messaging`** permission

      *   `phone-number-id` for your registered WhatsApp account. See [Get Phone
      Number](#c72d9c17-554d-4ae1-8f9e-b28a94010b28).
  - name: API Reference > Messages > Messages Object
    description: >-
      To send a message, you must first assemble a message object with the
      content you want to send. The **`Message Object`** contains the following
      fields used to create a message object:


      #### Fields


      | Name | Description |

      |------|----------|

      |**`messaging_product`** | **Required**. <br/> Messaging service used for
      the request. Always use `"whatsapp"`.|

      |**`recipient_type`** | **Optional**. <br/> Currently, you can only send
      messages to individuals. Set this value to `"individual"`.
      <br/><br/>**Default**: `individual` |

      |**`to`** | **Required**. <br/> WhatsApp ID or phone number for the person
      you want to send a message to.<br></br>See [Phone Numbers,
      Formatting](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/phone-numbers#formatting)
      for more information. |

      |**`context`** | **Optional**. Only used for Cloud API. <br/>Used to
      mention a specific message you are replying to. The reply can be any
      message type currently supported by the Cloud API. |

      |**`type`** | **Optional**. <br/>The type of message you want to send.
      <br/><br/>The supported options for beta users are: <ul><li>**text**: for
      text messages.</li><li>**template**: for template messages. Only
      text-based templates are supported.</li><li>**document**: for document
      messages.</li><li>**image**: for image messages.</li><li>**interactive**:
      for list and reply button messages.</li><li>**audio**: for audio
      messages.</li><li>**contacts**: for contacts
      messages.</li><li>**location**: for location
      messages.</li><li>**sticker**: for sticker messages.</li><li>**video**:
      for video messages.</li></ul><br/>**Default**: `text`|

      |**`text`** | **Required for text messages**.<br/> A [text
      object](#fa59d67b-dc6f-446a-a0fd-f97537afbd2e). |

      |**`audio`** | **Required when `type` is set to `audio`**.<br/> A [media
      object](#77f64012-481d-45d8-855f-e1620c6b2a5e) containing audio. |

      |**`contact`** | **Required when `type` is set to `contacts`**.<br/> A
      [contacts object](#5bb1e554-402c-4278-bce4-657a9c4dc12f).|

      |**`document`** | **Required when `type` is set to `document`**.<br/> A
      [media object](#77f64012-481d-45d8-855f-e1620c6b2a5e) containing a
      document.  |

      |**`image`** | **Required when `type` is set to `image`**.<br/> A [media
      object](#77f64012-481d-45d8-855f-e1620c6b2a5e) containing an image.  |

      |**`interactive`** | **Required when `type` is set to
      `interactive`**.<br/> An [interactive
      object](#68fe0550-aba5-4ee3-b79d-0846f3dddef1). This option is used to
      send List Messages and Reply Buttons.<br/><br/>The components of each
      interactive object generally follow a consistent pattern: **`header`**,
      **`body`**, **`footer`**, and **`action`**. |

      |**`location`** | **Required when type `type` is set to `location`**.<br/>
      A [location object](#2ad90ff7-6fef-40a8-96cf-83f1144763c1).  |

      |**`reaction`** | **Required when type `type` is set to `reaction`**.
      <br/> A [reaction object](). |

      |**`sticker`** | **Required when `type` is set to `sticker`**.<br/> A
      [media object](#77f64012-481d-45d8-855f-e1620c6b2a5e) containing a
      sticker. Currently, we only support third-party static stickers. Static
      stickers must be 512x512 pixels and cannot exceed 100 KB. Animated
      stickers must be 512x512 pixels and cannot exceed 500 KB.|

      |**`video`** | **Required when `type` is set to `video`**.<br/> A [media
      object](#77f64012-481d-45d8-855f-e1620c6b2a5e) containing a video.  |

      |**`template`** | **Required when type is set to `template`**.<br/> A
      [template object](#fb5ad9b7-7991-443a-a1b5-97fdc5731673).  |
  - name: API Reference > Messages > Messages Object > Text Object
    description: >-
      A **`Text Object`** consists of the following fields and formatting
      options:


      #### Fields


      | Name           |  Description |

      |----------------|--------------|

      | **`body`**     | **Required for text messages**.<br/>The text of the
      text message that can contain URLs and supports formatting. To view
      available formatting options, see [Text Object Formatting
      Options](https://developers.facebook.com/docs/whatsapp/api/messages#formatting).
      <br/><br/>If you include URLs in your text **and** want to include a
      preview box in text messages (`"preview_url": true`), ensure it starts
      with `http://` or `https://`. You must include a hostname, since IP
      addresses are not matched.<br/><br/>Maximum length: 4096 characters. |

      |**`preview_url`**<br/>type: `Boolean`| **Optional**.<br/>By default,
      WhatsApp recognizes URLs and makes them clickable, but you can also
      include a preview box with more information about the link. Set this field
      to `true` if you want to include a URL preview box.<br/><br/>The majority
      of the time when you send a URL, whether with a preview or not, the
      receiver of the message will see a URL that they can click
      on.<br/><br/>URL previews are only rendered after one of the following has
      occurred:<ul><li>The business has sent a message template to the
      user.</li><li>The user initiates a conversation with a "click to chat"
      link.</li><li>The user adds the business phone number to their address
      book and initiates a conversation.</li></ul><br/>**Default**: `false`|
  - name: API Reference > Messages > Messages Object > Reaction Object
    description: >-
      The `Reaction Object` consists of a message ID and a emoji.


      #### Fields


      | Name            | Description         |

      |-----------------|---------------------|

      | **`message_id`**        | **Required**.<br/><br/>Specifies the WhatsApp
      message ID (WAMID) that this reaction is being sent to. <br/><br/> You
      cannot send a reaction to a **`message_id`** that previously sent or
      received reaction messages. |

      | **`emoji`**      | **Required**.<br/><br/>The emoji used for the
      reaction.<br/><br/>All emojis are supported, however only one emoji can be
      sent in a reaction message. Set this value to "" (empty string) to remove
      the reaction. <br/>Unicode is not supported. However, unicode values can
      be Java or JavaScript-escape encoded. |
  - name: API Reference > Messages > Messages Object > Media Object
    description: >-
      The `Media Object` consists of audio, document, image, sticker, and video
      objects.


      #### Fields


      | Name            | Description         |

      |-----------------|---------------------|

      | **`id`**        | **Required when type is an image, audio, document,
      sticker, or video and you are not using a link**.<br/>The media object ID.
      For more information, see [Get Media
      ID](#39a02bc0-ede1-4848-b24e-4ac3d501aaea). |

      | **`link`**      | **Required when type is audio, document, image,
      sticker, or video and you are not using an uploaded media ID.** <br/>The
      protocol and URL of the media to be sent. Use only with HTTP/HTTPS URLs. |

      | **`caption`** | **Optional**.<br/>Describes the specified image,
      document, or video. Do not use it with audio or sticker media.|

      |**`filename`** | **Optional**. <br/> Describes the filename for the
      specific document. Use only with document media.|
  - name: API Reference > Messages > Messages Object > Template Object
    description: >-
      The `Template Object` contains the following fields:


      #### Fields


      | Name             | Description              |

      |------------------|--------------------------|

      | **`name`**  |**Required**. <br/> The name of the template. |

      | **`language`**  |**Required**. <br/> Specifies a [language
      object](https://documenter.getpostman.com/view/13382743/UVC5FTHT?fbclid=IwAR083mCseNzJm-JgxlIQbdF30hkAbEOHkbBaw9bA7-isGKU6uwtq1RJKc0o#d9272e38-c3db-458c-a23b-07953abc73a4).
      Specifies the language the template may be rendered in.<br/><br/>Only the
      **`deterministic`** language policy works with media template messages.|

      | **`components`**  |**Optional**. <br/> An array of [components
      objects](https://documenter.getpostman.com/view/13382743/UVC5FTHT?fbclid=IwAR0V3m0B47q6rsaPsrwcWzb5FbNtQD7K8I1RulisTB4Mj-rB0AYiSkdc9lY#8225365a-acb8-48c7-8e57-079dfc532865)
      that contain the parameters of the message. |
  - name: API Reference > Messages > Messages Object > Language Object
    description: >-
      The `Language Object` contains the following fields:


      #### Fields


      | Name             | Description              |

      |------------------|--------------------------|

      | **`policy`**  |**Optional**. <br/> For more information, see [Language
      Policy
      Options](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#language-policy-options).
      <br/><br/> **Default** (and only supported value): `deterministic`|

      | **`code`**  |**Required**. <br/>The code of the language or locale to
      use. This field accepts both language (for example, `‘en’`) and
      language_locale (for example, `‘en_US’`) formats. <br/> For more
      information regarding all codes, see [Supported
      Languages](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages).
      |
  - name: API Reference > Messages > Messages Object > Components Object
    description: >-
      The `Components Object` contains the following fields:


      #### Fields


      | Name             | Description              |

      |------------------|--------------------------|

      | **`type`**  |**Required**. <br/> Describes the component type.
      <br/><br/> **Values**: `header`, `body`, `button` <br/> For text-based
      templates, only `body` is supported. |

      | **`parameters`**  |**Required when type is `button`**. <br/> The
      namespace of the template. |

      | **`sub_type`**  |**Required when type is `button`. Not used for the
      other types.**<br/> The type of button to create. <br/><br/>**Values**:
      `quick_reply`, `url`|

      | **`index`**  |**Required when type is `button`. Not used for the other
      types.** <br/> The position index of the button. You can have up to 3
      buttons using index values of 0 to 2. |
  - name: API Reference > Messages > Messages Object > Parameter Object
    description: >-
      The **`Parameter Object`** contains the following fields:


      #### Fields


      | Name             | Description              |

      |------------------|--------------------------|

      | **`type`**       |**Required**. <br/> Describes the parameter type.
      <br/><br/><br/>**Values**: `text`, `currency`, `date_time`, `image`,
      `document`<br/><br/>For text-based templates, the only supported parameter
      types are `text`, `currency`, and `date_time` |

      | **`text`**       |**Required when type=`text`**. <br/> The message of
      the text.<br/>For the `header component`, the character limit is 60
      characters. <br/>For the `body component`, the character limit is
      1024.<br/><br/>The exception to these character limits applies to template
      messages in the following conditions:<br/><ul><li>When sending a
      **`template`** message with a **`body`** component only, the character
      limit for the `text` parameter and the full template text is 32768
      characters.</li><li>When sending a **`template`** message with **`body`**
      and other components, The character limit for the `text` parameter and the
      full template text is 1024 characters.</li><ul/>|

      | **`currency`**       |**Required when type is `currency`**. <br/> A
      [currency object](#424b70af-ced8-456d-b1e1-1360c5afb9e9).|

      | **`date_time`**       |**Required when type is `date_time`**. <br/> A
      [date_time object](#ec955b05-7bd4-4273-ad87-ae755b580f6e).|

      | **`image`**       |**Required when type is `image`**. <br/> A [media
      object](#77f64012-481d-45d8-855f-e1620c6b2a5e) of type image.|

      | **`document`**       |**Required when type is `document`**. <br/> A
      [media object](#77f64012-481d-45d8-855f-e1620c6b2a5e) of type document.
      <br/>Only PDF documents are supported for media-based message templates.|
  - name: API Reference > Messages > Messages Object > Currency Object
    description: >-
      The `Currency Object` contains the following fields:


      #### Fields


      | Name                 | Description              |

      |----------------------|--------------------------|

      | **`fallback_value`** |**Required**. <br/> The default text if
      localization fails. <br/> |

      | **`code`**           |**Required**. <br/> The currency code as defined
      in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217#Active_codes). <br/>
      |

      | **`amount_1000`**           |**Required**. <br/> The amount multiplied
      by 1000. <br/> |
  - name: API Reference > Messages > Messages Object > Date_Time Object
    description: >-
      The `Date_Time Object` contains the following fields:


      #### Fields


      | Name                 | Description              |

      |----------------------|--------------------------|

      | **`fallback_value`** | **Required**. <br/> The default text if
      localization fails. |

      | **`day_of_week`**    | **Optional**. <br/> If it is different from the
      value derived from the date (if specified), use the derived value. Both
      strings and numbers are accepted.<br/>Supported values: <ul><li>`"MONDAY"`
      or 1</li><li>`"TUESDAY"` or 2</li><li>`"WEDNESDAY"` or
      3</li><li>`"THURSDAY"` or 4</li><li>`"FRIDAY"` or 5</li><li>`"SATURDAY"`
      or 6</li><li>`"SUNDAY"` or 7</li></ul> |

      | **`year`** | **Optional**. <br/> Specifies the year. |

      | **`month`** | **Optional**. <br/> Specifies the month. |

      | **`day_of_month`** | **Optional**. <br/> Specifies the day of the month.
      |

      | **`hour`** | **Optional**. <br/> Specifies the hour. |

      | **`minute`** | **Optional**. <br/> Specifies the minute. |

      | **`calendar`** | **Optional**. <br/> The type of
      calendar.<br/><br/>**Values**: `"GREGORIAN"` or `"SOLAR_HIJRI"`. |
  - name: API Reference > Messages > Messages Object > Button Parameter Object
    description: >-
      The `Button Parameter Object` contains the following fields:


      #### Fields


      | Name                 | Description              |

      |----------------------|--------------------------|

      | **`type`** | **Required**. <br/> Specifies the type of parameter for the
      button. <br/><br/>**Values**: `payload`,`text`|

      | **`payload`** | **Required for `quick_reply` buttons**. <br/>
      Developer-defined payload that is returned when the button is clicked in
      addition to the display text on the button.<br/><br/>For more information
      on usage, see [Callback from a Quick Reply Button
      Click](#eb99d8fb-170a-4284-b7da-454484a0333a).|

      | **`text`** | **Required for url buttons**. <br/> Developer-provided
      suffix that is appended to the predefined prefix URL in the template.|
  - name: API Reference > Messages > Messages Object > Contacts Object
    description: >-
      The `Contacts Object` contains the following fields:


      #### Fields


      | Name                 | Description              |

      |----------------------|--------------------------|

      | **`addresses`** | **Optional**. <br/> Specifies an array of address
      objects. For more information, see [address
      object](https://developers.facebook.com/docs/whatsapp/api/messages#addresses-object).|

      | **`birthday`** | **Optional**. <br/> A **YYYY-MM-DD** formatted string.|

      | **`emails`** | **Optional**. <br/> Specifies an array of email objects.
      For more information, see [emails
      object](https://developers.facebook.com/docs/whatsapp/api/messages#emails-object).|

      | **`name`** | **Required**. <br/> Specifies the name object. For more
      information, see [name
      object](https://developers.facebook.com/docs/whatsapp/api/messages#name-object).|

      | **`org`** | **Optional**. <br/> Specifies the org object. For more
      information, see [org
      object](https://developers.facebook.com/docs/whatsapp/api/messages#org-object).|

      | **`phones`** | **Optional**. <br/> Specifies an array of phone objects.
      For more information, see [phone
      object](https://developers.facebook.com/docs/whatsapp/api/messages#phone-object).|

      | **`urls`** | **Optional**. <br/> Specifies an array of url objects. For
      more information, see [url
      object](https://developers.facebook.com/docs/whatsapp/api/messages#urls-object).|
  - name: >-
      API Reference > Messages > Messages Object > Contacts Object > addresses
      Object
    description: >-
      | Name | Description |

      | --- | --- |

      | **`street`** | **Optional**.  <br>Steet number and name. |

      | **`city`** | **Optional**.  <br>The name of the city. |

      | **`state`** | **Optional**.  <br>The abbreviation name of the state. |

      | **`zip`** | **Optional**.  <br>The ZIP code. |

      | **`country`** | **Optional**.  <br>The full name of the country. |

      | **`country_code`** | **Optional**.  <br>The two-letter country
      abbreviation. |

      | **`type`** | **Optional**.  <br>Standard values: `HOME`, `WORK`. |
  - name: >-
      API Reference > Messages > Messages Object > Contacts Object > emails
      Object
    description: |-
      | Name | Description |
      | --- | --- |
      | **`email`** | **Optional**.  <br>Email address. |
      | **`type`** | **Optional**.  <br>Standard Values: `HOME`, `WORK` |
  - name: API Reference > Messages > Messages Object > Contacts Object > name Object
    description: >-
      | Name | Description |

      |---|---|

      | **`formatted_name`** | **Required.**<br>Full name, as it normally
      appears. |

      | **`first_name`** | **Optional**.<br>First name.|

      | **`last_name`** | **Optional**.<br>Last name. |

      | **`middle_name`** | **Optional**.<br>Middle name. |

      | **`suffix`** | **Optional**.<br>Name suffix.|

      | **`prefix`**| **Optional**.<br>Name prefix. |


      * At least one of the optional parameters needs to be included along with
      the **`formatted_name`** parameter.
  - name: API Reference > Messages > Messages Object > Contacts Object > org Object
    description: >-
      | Name | Description |

      | --- | --- |

      | **`company`** | **Optional.**  <br>Name of the contact's company. |

      | **`department`** | **Optional.**  <br>Name of the contact's department.
      |

      | **`title`** | **Optional.**  <br>The contact's business title. |
  - name: >-
      API Reference > Messages > Messages Object > Contacts Object > phone
      Object
    description: >-
      | Name | Description |

      | --- | --- |

      | **`phone`** | **Optional.**  <br>Automatically populated with the
      **`wa_id`** value as a formatted phone number. |

      | **`type`** | **Optional.**  <br>Standard Values: `CELL`, `MAIN`,
      `IPHONE`, `HOME`, `WORK` |

      | **`wa_id`** | **Optional.**  <br>WhatsApp ID. |
  - name: API Reference > Messages > Messages Object > Contacts Object > urls Object
    description: |-
      | Name | Description |
      | --- | --- |
      | **`url`** | **Optional.**  <br>The URL. |
      | **`type`** | **Optional.**  <br>Standard Values: `HOME`, `WORK` |
  - name: API Reference > Messages > Messages Object > Location Object
    description: >-
      The `Location Object` contains the following fields:


      <h5>Fields</h5>


      | Name                 | Description              |

      |----------------------|--------------------------|

      | **`longitude`** | **Required**. <br/> The longitude of the location.|

      | **`latitude`** | **Required**. <br/> The latitude of the location.|

      | **`name`** | **Optional**. <br/> The name of the location.|

      | **`address`** | **Optional**. <br/> The address of the location. This
      field is only displayed if **`name`** is present.|
  - name: API Reference > Messages > Messages Object > Interactive Object
    description: >-
      The **`Interactive Object`** contains four main components: **`header`**,
      **`body`**, **`footer`**, and **`action`**. Additionally, some of those
      components can contain one or more different objects:


      * Inside **`header`**, you can nest **`media`** objects.

      * Inside **`action`**, you can nest **`section`** and **`button`**
      objects.


      #### Fields


      | Name                 | Description              |

      |----------------------|--------------------------|

      | **`type`**      | **Required**.<br/>The type of interactive message you
      want to send. Supported values:<ul><li>`list`: Use it for List
      Messages.</li><li>`button`: Use it for Reply Buttons.</li><li>`product`:
      Use this for Single Product Messages</li><li>`product_list`: Use this for
      Multi-Product Messages</li></ul>|

      | **`header`**      | **Required for type `product_list`**. **Optional for
      other types**.<br/>This contains the header content displayed on top of a
      message. You cannot set a **`header`** if your **`interactive`** object is
      type `product`.<br/><br/>The **`header`** object contains the following
      fields:<ul><li>`document`: **Required** if **`type`** is set to
      `document`. Contains the **`media`** object with the
      document.</li><li>`image`: **Required** if **`type`** is set to `image`.
      Contains the **`media`** object with the image.</li><li>`video`:
      **Required** if **`type`** is set to `video`. Contains the **`media`**
      object with the video.</li><li>`text`: **Required** if **`type`** is set
      to `text`. The text for the header. Formatting allows emojis, but not
      markdown. Maximum length: 60 characters.</li></ul><br/><br/>Supported
      interactive message type by header type:<ul><li>`text` - for List
      Messages, Reply Buttons, and Multi-Product Messages</li><li>`video` - for
      Reply Buttons.</li><li>`image`: for Reply Buttons.</li><li>`document` -
      For Reply Buttons.</li></ul>|

      | **`body`**      |  **Optional** for type `product`. **Required** for all
      other message types.<br/>The body of the message. The **`text`** field for
      the **`body`** object supports Emojis and markdown.<br/><br/>Maximum
      length: 1024 characters.|

      | **`footer`**      | **Optional**.<br/>An object with the footer of the
      message.Emojis and markdown are supported.<br/><br/>Maximum length: 60
      characters.|

      | **`action`**      | **Required**.<br/>The action you want the user to
      perform after reading the message.|
  - name: >-
      API Reference > Messages > Messages Object > Interactive Object > Header
      Object
    description: >-
      ##### Fields


      | Name                 | Description              |

      |----------------------|--------------------------|

      | **`type`**      | **Required**.<br/>The header type you would like to
      use. Supported values are:<ul><li>`text`: Used for List Messages, Reply
      Buttons, and Multi-Product Messages.</li><li>`video`: Used for Reply
      Buttons.</li><li>`image`: Used for Reply Buttons.</li><li>`document`: Used
      for Reply Buttons.</li></ul>|

      | **`text`**      | **Required if `type` is set to `text`**.<br/>The text
      for the header. Formatting allows emojis, but not
      markdown.<br/><br/>Maximum length: 60 characters.|

      | **`video`**      | **Required if `type` is set to
      `video`**.<br/>Contains the **`media`** object for this video.|

      | **`image`**      | **Required if `type` is set to
      `image`**.<br/>Contains the **`media`** object for this image.|

      | **`document`**      | **Required if `type` is set to
      `document`**.<br/>Contains the **`media`** object for this document.|
  - name: >-
      API Reference > Messages > Messages Object > Interactive Object > Body
      Object
    description: >-
      ##### Fields


      | Name                 | Description              |

      |----------------------|--------------------------|

      | **`text`**      | **Required**.<br/>The body content of the message.
      Emojis and markdown are supported. Links are supported.<br/><br/>Maximum
      length: 1024 characters.|
  - name: >-
      API Reference > Messages > Messages Object > Interactive Object > Footer
      Object
    description: >-
      ##### Fields


      | Name                 | Description              |

      |----------------------|--------------------------|

      | **`text`**      | **Required if the `footer` object is
      present**.<br/>The footer content of the message. Emojis and markdown are
      supported. Links are supported.<br/><br/>Maximum length: 60 characters.|
  - name: >-
      API Reference > Messages > Messages Object > Interactive Object > Action
      Object
    description: >-
      ##### Fields


      | Name                 | Description              |

      |----------------------|--------------------------|

      | **`button`**      | **Required for all List Messages**.<br/>The Button
      content. It cannot be an empty string and must be unique within the
      message. Does not allow emojis or markdown.<br/><br/>Maximum length: 20
      characters.|

      | **`buttons`**      | **Required for Reply Button**.<br/>A button can
      contain the following parameters:<ul><li>**`type`**: only supported if
      **`type`**=**`reply`**(for Reply Button)</li><li>**`title`**: The Button
      title. It cannot be an empty string and must be unique within the message.
      Does not allow emojis or markdown. Maximum length: 20
      characters.</li><li>**`id`**: Unique identifier for your button. This ID
      is returned in the Webhook when the button is clicked by the user. Maximum
      length: 256 characters.</li></ul><br/>You can have a maximum of 3
      buttons.|

      | **`sections`**      | **Required for List Messages and Multi-Product
      Messages**.<br/>The array of **`section`** objects. There is a minimum of
      1 and maximum of 10. For more information, see [section object](#).|

      | **`catalog_id`**  |  **Required for Single Product and Multi-Product
      messages.**<br/><br/>Unique identifier of the Facebook catalog linked to
      your WhatsApp Business Account. **`catalog_id`** can be retrieved through
      [Commerce Manager](https://business.facebook.com/commerce/). |

      | **`product_retailer_id`**  | **Required for Single Product and
      Multi-Product messages.**<br/><br/> The unique identifier of the product
      in the catalog.<br/><br/>To get the **`product_retailer_id`**, go to
      [Commerce Manager](https://business.facebook.com/commerce/), select your
      Facebook Business account, and you will see a list of shops connected to
      your account. Click the shop you want to use. On the left-side panel,
      click **Catalog** > **Items**, and find the item you want to mention. The
      ID for that item is displayed under the item's name.     |
  - name: >-
      API Reference > Messages > Messages Object > Interactive Object > Section
      Object
    description: >-
      ##### Fields


      | Name | Description |

      | --- | --- |

      | **`title`** | **Required if the message has more than one**
      **`section`**.  <br/>The title of the section.  <br/>  <br/>Maximum
      length: 24 characters. |

      | **`rows`** | **Required for List Messages**.  <br/Contains a list of
      rows. You can have a maximum of 10 rows across your sections. 
      <br/><br/>Each row must have a **`title`** (Maximum length: 24 characters)
      and an **`ID`** (Maximum length: 200 characters). You can add a
      **`description`** (Maximum length: 72 characters), but it is optional. |

      | **`product_items`** | **Required for Multi-Product
      Messages**.<br/><br/>Specifies an array of `product` objects.<br/>There is
      a minimum of 1 product per section and a maximum of 30 products across all
      sections.<br/><br/>Each `product` object contains the following
      field:<br/>**`product_retailer_id`** – **Required for Multi-Product
      Messages**. Specifies the unique identifier of the product in a catalog.
      To get this ID, go to [Commerce
      Manager](https://business.facebook.com/commerce/), select your account and
      the shop you want to use. Then, click **Catalog** > **Items**, and find
      the item you want to mention. The ID for that item is displayed under the
      item's name.



      ##### **`Rows`** Example


      ``` json

      "rows": [
        {
         "id":"unique-row-identifier-here",
         "title": "row-title-content-here",
         "description": "row-description-content-here",
         }
      ]


      ```
  - name: API Reference > Phone Numbers
    description: >-
      Some API calls listed in this document require you to know your phone
      number’s ID. For more information on how to get a list of phone numbers
      associated with your WhatsApp Business Account, see [Get All Phone
      Numbers](https://developers.facebook.com/docs/whatsapp/business-management-api/phone-numbers#all-phone-numbers).
      The API call response includes IDs for each of the phone numbers connected
      to your WhatsApp Business Account. Save the ID for the phone you want to
      use with any **`/{phone-number-ID}`** calls.
  - name: API Reference > Two-Step Verification
    description: >-
      You are required to set up two-step verification for your phone number, as
      this provides an extra layer of security to the business accounts. To set
      it up, make a **POST** call to **`/{{Phone-Number-ID}}`** and attach the
      following parameters. There is no endpoint to disable two-step
      verification.


      <h5>Reminders</h5>


      * To use these endpoints, you need to authenticate yourself with a system
      user access token with the **`whatsapp_business_messaging`** permission.

      * If you need to find your phone number ID, see [Get Phone Number
      ID](https://developers.facebook.com/docs/whatsapp/business-management-api/manage-phone-numbers#get-a-single-phone-number).
  - name: API Reference > WhatsApp Business Accounts (WABAs)
    description: >-
      Some API calls listed in this document require you to know your WhatsApp
      Business Account (WABA) ID. You have the following methods of getting a
      WABA ID:


      1.  **Business Manager**: This is the most simple way. Just open the
      [Business Manager](https://business.facebook.com/), select your business,
      go to Settings and find your WhatsApp Business Account. When you click on
      the account, you see `"owned by"` and `"id"`. Save that ID number.

      2.  **During Embedded Signup Onboarding**: See [Get Shared WABA ID with
      accessToken](https://developers.facebook.com/docs/whatsapp/embedded-signup/manage-accounts#get-shared-waba-id-with-accesstoken)
      for information.

      3.  **Getting all WABAs shared with your business**: See [Get List of
      Shared
      WABAs](https://developers.facebook.com/docs/whatsapp/embedded-signup/manage-accounts#get-list-of-shared-wabas)
      for information.
  - name: API Reference > WABA Subscriptions
    description: >-
      To get Webhook events for a specific WABA, you need to explicitly
      subscribe to that WABA. You only need to subscribe to a WABA once and then
      you receive all Webhook events for phone numbers under that WABA. You
      don’t need to subscribe for every phone number. 

      <br><br>


      ## Reminders

      - To use these endpoints, you need to authenticate yourself with a [System
      User Access
      Token](https://developers.facebook.com/docs/facebook-login/access-tokens#usertokens)
      with the **`whatsapp_business_management`** permission.

      - WhatsApp Business Account ID (WABA ID). If you need to find your WABA ID
      see [Get WABA ID](#b7f6e513-f4e4-4b62-b4a2-d18dc5e6249c).

      - You need to set up Webhooks server in your application to receive
      Webhooks events. To learn how to set up Webhooks, see
      [Webhooks](https://developers.facebook.com/docs/whatsapp/cloud-api/webhooks/components).
  - name: Examples
  - name: Webhooks
    description: >-
      Webhooks are user-defined HTTP callbacks that are triggered by specific
      events. Whenever that trigger event occurs, the WhatsApp Business API
      client captures the event, collects the data, and immediately sends a
      notification (HTTPs request) to the Webhook URL configured in the Webhooks
      setup step.


      For the purposes of this use case, your Webhooks server must be reachable
      from facebook and have HTTPs support and a valid SSL certificate. See
      [Webhooks, Getting
      Started](https://developers.facebook.com/docs/graph-api/webhooks/getting-started)
      for requirements on creating a Webhooks endpoint and configuring the
      Webhooks product.


      To get Webhooks notifications, your application must subscribe to the WABA
      you want to receive alerts for. For a full guide, see [Webhooks for
      WhatsApp Business
      Accounts](https://developers.facebook.com/docs/graph-api/webhooks/getting-started/webhooks-for-whatsapp).
  - name: Webhooks > Understanding Webhooks
    description: >-
      Whenever a trigger event occurs, the WhatsApp Business API sees the event
      and sends a notification to a Webhook URL you have previously specified.
      You can get two types of notifications:


      <ul><li><p>Received messages: This alert lets you know when you have
      received a message. These can also be called <code>"inbound
      notifications"</code> throughout the documentation.</p></li><li><p>Message
      status and pricing notifications: This alert lets you know when the status
      of a message has changed. For example, the message has been read or
      delivered. These can also be called <code>"outbound notifications"</code>
      throughout the documentation.</p></li></ul>


      All Webhooks have the following generic JSON format:


      ``` json

      {
        "object": "whatsapp_business_account",
        "entry": [
          {
            "id": "WHATSAPP_BUSINESS_ACCOUNT_ID",
            "changes": [
              {
                "value": {
                    "messaging_product": "whatsapp",
                    "metadata": {
                        "display_phone_number": "PHONE_NUMBER",
                        "phone_number_id": "PHONE_NUMBER_ID"
                    },
                    # specific Webhooks payload            
                },
                "field": "messages"
              }
            ]
          }
        ]
      }


      ```


      See [Components](#cefb0b2a-5fc8-43c3-aea6-865ba98f6061) for information on
      each field.  

      If you receive a message that is not supported for the Cloud API beta
      release, you will get an [unknown message
      Webhook](https://developers.facebook.com/docs/whatsapp/cloud-api/webhooks#received-unknown-messages).


      ### Limitations


      At any time, each Meta App can have only one endpoint configured. If you
      need to send your webhook updates to multiple endpoints, you need multiple
      Meta Apps.
  - name: Webhooks > Generate Endpoint for Webhook Testing
    description: >-
      If you want to test your Webhooks, see [Generate Endpoint for Webhooks
      Testing](https://developers.facebook.com/docs/whatsapp/api/webhooks/generate-endpoint)
      for more information.
  - name: Webhooks > Components
    description: >-
      The top level Webhooks array contains the following two fields:


      | Field                   | Description                      |

      |--------------------|----------------------------------|

      | **`object`**       | All Webhook events for WhatsApp Cloud API belong
      under the **`whatsapp_business_account`** object. |

      | **`entry`**        | An array of [entry
      objects](#818e8a3e-37b1-4bb6-8441-3291c02c0258). |
  - name: Webhooks > Components > Entry Object
    description: >-
      | Field                   | Description                      |

      |--------------------|----------------------------------|

      | **`id`**           | The ID of Whatsapp Business Accounts this Webhook
      belongs to. |

      | **`changes`**      | Changes that triggered the Webhooks call. This
      field contains an array of change objects. |
  - name: Webhooks > Components > Change Object
    description: >-
      | Field                   | Description                      |

      |--------------------|----------------------------------|

      | **`value`**        | A [value
      object](#54a8a703-18c8-47af-9aaf-a560afd9aa7b). Contains details of the
      changes related to the specified field. |

      | **`field`**        | Contains the type of notification you are getting
      on that Webhook. Currently, the only option for this API is `“messages”`.
      |
  - name: Webhooks > Components > Metadata Object
    description: >-
      | Name                    | Description                      |

      |-------------------------|----------------------------------|

      | **`display_phone_number`** | The phone number of the business account
      that is receiving the Webhooks. |

      | **`phone_number_id`** | The ID of the phone number receiving the
      Webhooks. You can use this **`phone_number_id`** to send messages back to
      customers. |
  - name: Webhooks > Components > Value Object
    description: >-
      | Field                   | Description                      |

      |-------------------------|----------------------------------|

      | **`messaging_product`** | The messaging service used for Webhooks. For
      WhatsApp messages, this value needs to be set to `“whatsapp”`. |

      | **`metadata`**        | The metadata about your phone number. |

      | **`messages`**        | An array of [message
      objects](#9ad6ff8c-72d6-4b04-b4d5-45fe093976ad). **Added to Webhooks for
      incoming message notifications**.|

      | **`statuses`**        | An array of [message status
      objects](#15305365-753b-400a-90ce-de069ee7f909). **Added to Webhooks for
      message status update**. |

      | **`errors`**          | An array of [message error
      objects](#a89ecf92-9b51-409a-af27-2c3b9bc0fd7e). |
  - name: Webhooks > Components > Contact Object
    description: >-
      | Field                   | Description                      |

      |-------------------------|----------------------------------|

      | **`profile`**           | The [profile
      object](#bedd6ec6-be2f-42ca-9b0e-a6c3f6f4cd70).          |

      | **`wa_id`**             | The WhatsApp ID of the customer. You can send
      messages using this **`wa_id`**.          |
  - name: Webhooks > Components > Profile Object
    description: |-
      | Field | Description |
      | --- | --- |
      | **`name`** |  **Optional.**<br/> Specifies the sender's profile name. |
  - name: Webhooks > Components > Messages Object
    description: >-
      The messages array of objects is nested within the **`Value`** object and
      is triggered when a customer updates their profile information or a
      customer sends a message to the business that is subscribed to the
      Webhook.


      | Field                   | Description                      |

      |-------------------------|----------------------------------|

      | **`from`**              | The customer's phone number.       |

      | **`id`**                | The unique identifier of incoming message, you
      can use messages endpoint to mark it as read.       |

      | **`timestamp`**         | The timestamp when a customer sends a
      message.       |

      | **`type`**              | The type of message being
      received.<br/><br/>Supported values are:<ul><li>`text`: for text
      messages.</li><li>`image`: for image (media)
      messages.</li><li>`interactive`: for interactive
      messages.</li><li>`document`: for document (media)
      messages.</li><li>`audio`: for audio and voice (media)
      messages.</li><li>`sticker`: for sticker messages.</li><li>`order`: for
      when a customer has placed an order.</li><li>`video`: for video (media)
      messages.</li><li>`button`: for responses to [interactive message
      templates](#b00c9f92-be3e-4511-af38-be72827a7f3a).</li><li>`contacts`: for
      contact messages.</li><li>`location`: for location
      messages.</li><li>`unknown`: for unknown messages.</li><li>`system`: for
      user number change messages.</li></ul>       |

      | **`context`**              |  **Added to Webhook if message is forwarded
      or an inbound reply.** <br/>A [context
      object](#57287ed9-e640-44db-b991-9f03749cb645).|

      | **`identity`**            | **Added to Webhook if
      show_security_notifications is enabled in application settings.** <br/>An
      [identity object](#a1b69494-a0f5-405c-9dd5-968362c4a30f). |

      | **`text`**              |  **Added to Webhook if type is `text`**.
      <br/>A [text object](#e2e1d9df-0886-4e29-a8c8-ff93223178bd). |

      | **`audio`**              |  **Added to Webhook if type is `audio`
      (including voice messages)**. <br/>A [media
      object](#058689bd-e754-4efc-938d-bec7bec3b1c4) with the audio information.
      |

      | **`image`**              |  **Added to Webhook if type is `image`**.
      <br/>A [media object](#058689bd-e754-4efc-938d-bec7bec3b1c4) with the
      image information. |

      | **`sticker`**              |  **Added to Webhook if type is `sticker`**.
      <br/>A [media object](#058689bd-e754-4efc-938d-bec7bec3b1c4) with the
      sticker information. |

      | **`video`**              |  **Added to Webhook if type is `video`**.
      <br/>A [media object](#058689bd-e754-4efc-938d-bec7bec3b1c4) with the
      video information. |

      | **`interactive`**              |  **Added to Webhook if type is
      `interactive`**. <br/>When a customer has interacted with your message, an
      [interactive
      object](https://documenter.getpostman.com/view/13382743/UVC5FTHT?fbclid=IwAR083mCseNzJm-JgxlIQbdF30hkAbEOHkbBaw9bA7-isGKU6uwtq1RJKc0o#68fe0550-aba5-4ee3-b79d-0846f3dddef1)
      is included in the **``Messages`** object. |

      | **`order`** | Included in the **`Messages`** object when a customer has
      placed an order. The order object can contain the following
      fields:<ul><li>**`catalog_id`**: ID for the catalog the ordered item
      belongs to.</li><li>**`text`**: Text message from the user sent along with
      the order.</li><li>**`product_items`**: Array of product item
      objects.</li></ul><br/><br/>The **`product_items`** object contains the
      following fields:<ul><li>**`product_retailer_id`**: The unique identifier
      of the product in a catalog.</li><li>**`quanitity`**: The number of
      items.</li><li>**`item_price`**: The price of each
      item.</li><li>**`currency`**: The price currency.</li></ul>

      | **`document`**              |  **Added to Webhook if type is
      `document`**. <br/>A [media object](#058689bd-e754-4efc-938d-bec7bec3b1c4)
      with the document information. |

      | **`errors`**              |  **Added to Webhook if type is `unknown`**.
      <br/>If displayed, this field contains the following error
      message:<br/><br/>```[{"code":131051,"details":"Message type is not
      currently supported","title":"Unsupported message type"]```|

      | **`system`**              |  **Added to Webhook if type is `system`**.
      <br/>A [system message object](#15b395a9-15eb-4610-ba12-3c9f8a5e0528). |

      | **`button`**              |  **Added to Webhook if type is `button`**.
      <br/>A [button message object](#cffcb0b3-f6c8-45d6-b4a1-5deaa8955a7d).
      <br/>This field is used when the Webhook notifies you that a user clicked
      on a quick reply button.|

      | **`referral`**              |  **Added to Webhook if the message is
      coming from a user that clicked an ad that is `Click To WhatsApp`**.<br/>A
      [referral object](). This is how the referral object works:<ol><li>A user
      clicks on an ad with the Click to WhatsApp call-to-action.</li><li>User is
      redirected to WhatsApp and sends a message to the advertising
      business.</li><li>User sends a message to the business. Be aware that
      users may elect to remove their referral data.</li><li>The advertising
      business gets an inbound message notification including the **`referral`**
      object, which provides additional context on the ad that triggered the
      message. Knowing all this information, the business can appropriately
      reply to the user message.</li></ol>

      |
  - name: Webhooks > Components > Text Object
    description: |-
      | Field                 | Description                      |
      |-------------------------|----------------------------------|
      | **`body`**              | The text of the text message.    |
  - name: Webhooks > Components > Context Object
    description: >-
      | Field                 | Description                      |

      |----------------------------|----------------------------------|

      | **`forwarded`**            | **Added to Webhooks if message was
      forwarded.**<br/>Set to **`true`** if the received message has been
      forwarded.         |

      | **`frequently_forwarded`** | **Added to Webhooks if message has been
      frequently forwarded.**<br/>Set to **`true`** if the received message has
      been forwarded more than five times.         |

      | **`from`**               | **Added to Webhooks if message is an inbound
      reply to a sent message.**<br/>The WhatsApp ID of the sender of the sent
      message.         |

      | **`id`**                | **Optional**<br/>The message ID for the sent
      message for an inbound reply. |

      | **`referred_product`** | **Required for Product Enquiry
      Messages**.<br/><br/>Specifies the product the user is requesting
      information about. For more information, see [Receive Response From
      Customers](https://developers.facebook.com/docs/whatsapp/on-premises/guides/commerce-guides/receive-responses-from-customers).<br/><br/>The
      **`referred_product`** object contains the following
      fields:<ul><li>**`catalog_id`**: Unique identifier of the Meta catalog
      linked to the WhatsApp Business
      Account.</li><li>**`product_retailer_id`**: Unique identifier of the
      product in a catalog.</li></ul> |
  - name: Webhooks > Components > Identity Object
    description: >-
      | Field                 | Description                      |

      |----------------------------|----------------------------------|

      | **`acknowledged`**         | State of acknowledgment for latest
      **`user_identity_changed`** system notification. |

      | **`created_timestamp`**    | The timestamp of when the WhatsApp Business
      API detected the user potentially changed. |

      | **`hash`**                 | Identifier for the latest
      **`user_identity_changed`** system notification. |
  - name: Webhooks > Components > Media Object
    description: >-
      **`Media Object`** is used for audio, images, documents, videos and
      stickers.


      | Field                 | Description                      |

      |----------------------------|----------------------------------|

      | **`caption`**         | **Added to Webhooks if it has been previously
      specified.**<br/>The caption that describes the media. |

      | **`filename`**        | **Added to Webhooks for document
      messages.**<br/>The media's filename on the sender's device. |

      | **`id`**              | The ID of the media. |

      | **`mime_type`**       | The mime type of the media. |

      | **`sha256`**          | The checksum of the media. |
  - name: Webhooks > Components > Reaction Object
    description: >-
      The `Reaction` object contains information about messages that contain a
      reaction and corresponding emojis. This object contains the following
      fields:


      | Field                 | Description                      |

      |-----------------------|----------------------------------|

      | **`message_id`**      | Specifies the **`wamid`** of the message
      received that contained the reaction. |

      | **`emoji`**           | The emoji used for the reaction.|
  - name: Webhooks > Components > Interactive Object
    description: >-
      | Field | Description |

      | --- | --- |

      | **`type`** | Contains the type of interactive object. Supported options
      are:<ul><li>`button_reply`: for responses of Reply
      Buttons.</li><li>`list_reply`: for responses to List Messages and other
      interactive objects.</li></ul>|

      | **`button_reply`** | **Used on Webhooks related to Reply Buttons.** 
      <br/>Contains a [button reply
      object](#3530f9ca-704b-4811-a1bc-04472a72e00f). |

      | **`list_reply`** | **Used on Webhooks related to List Messages** 
      <br/>Contains a [list reply
      object](#374bd5d7-e6c5-48e6-80f9-5821ad5da7ff). |
  - name: Webhooks > Components > Interactive Object > Button Reply Object
    description: |-
      | Field | Description |
      | --- | --- |
      | **`id`** | The unique identifier of the button. |
      | **`title`** | The title of the button. |
  - name: Webhooks > Components > Interactive Object > List Reply Object
    description: |-
      | Field | Description |
      | --- | --- |
      | **`id`** | The unique identifier (ID) of the selected row. |
      | **`title`** | The title of the selected row. |
      | **`description`** | The description of the selected row. |
  - name: Webhooks > Components > System Message Object
    description: >-
      This object is added to Webhooks if a user has changed their phone number
      and if a user’s identity has potentially changed on WhatsApp.


      | Field                 | Description                      |

      |-----------------------|----------------------------------|

      | **`body`**            | Describes the system message event. Supported
      use cases are:<ul><li>**Phone number update:** for when a user changes
      from an old number to a new number.</li><li>**Identity update:** for when
      a user identity has changed.</li></ul> |

      | **`new_wa_id`**       | **Added to Webhooks for phone number
      updates.**<br/>New WhatsApp ID of the customer.|

      | **`identity`**       | **Added to Webhooks for identity
      updates.**<br/>New WhatsApp ID of the customer.|

      |**`type`**       | Supported types are:<ul><li>**user_changed_number**:
      for a user changed number notification.</li><li>**user_identity_changed**:
      for user identity changed notification.</li></ul>|

      | **`user`**       | **Added to Webhooks for identity updates.**<br/>The
      new WhatsApp user ID of the customer.|
  - name: Webhooks > Components > Statuses Object
    description: >-
      The **`statuses`** object informs you of the status of messages between
      you, users, and/or groups.


      | Field                        | Description                      |

      |------------------------------|----------------------------------|

      | **`id`**<br/>type: string    |  The message ID. |

      | **`recipient_id`**<br/>type: string | The WhatsApp ID of the recipient.|

      | **`status`**<br/>type: string          | The status of the message.
      Valid values are: **`read`**, **`delivered`**, **`sent`**, **`failed`**,
      or **`deleted`**. <br/><br/>For more information, see [All Possible
      Message Statuses](#9a302c08-c8d7-42da-8800-1b24bed8adaf).|

      | **`timestamp`**<br/>type: string       | The timestamp of the status
      message.|

      | **`type`**<br/>type: string            | The type of entity this status
      object is about. Currently, the only available option is
      `"message"`.<br/>_This object is only available for the On-Premises
      implementation of the API. Cloud API developers will not receive this
      field._ |

      | **`conversation`**<br/>type: object    | **This object will be provided
      by default when [Conversation-Based
      Pricing](https://developers.facebook.com/docs/whatsapp/pricing/conversationpricing)
      launches in a future update.**<br/>Object containing conversation
      attributes, including **`id`**. See [conversation
      object](#7f5a70d6-7302-44d3-a473-74b92c21365b) for more
      information.<br/><br/>WhatsApp defines a conversation as a 24-hour session
      of messaging between a person and a business. There is no limit on the
      number of messages that can be exchanged in the fixed 24-hour window. The
      24-hour conversation session begins when:<ul><li>A business-initiated
      message is delivered to a user</li><li>A business’ reply to a user message
      is delivered</li></ul><br/>The 24-hour conversation session is different
      from the 24-hour customer support window. The customer support window is a
      rolling window that is refreshed when a user-initiated message is
      delivered to a business. Within the customer support window businesses can
      send free-form messages. Any business-initiated message sent more than 24
      hours after the last customer message must be a template message. |

      | **`pricing`**<br/>type: object       | **This object will be provided by
      default when [Conversation-Based
      Pricing](https://developers.facebook.com/docs/whatsapp/pricing/conversationpricing)
      launches in a future update.**<br/>| Object containing billing attributes,
      including **`pricing_model`**, **`billable`** flag, and **`category`**.
      See [pricing
      object](https://documenter.getpostman.com/view/13382743/UVC5FTHT#f72385a4-9ab5-40ec-bd1b-fd0adf0d37e3)
      for more information.

      | **`errors`**          | **Added to Webhook if status is set to
      `failed`**. <br/>An array of [error
      objects](#a89ecf92-9b51-409a-af27-2c3b9bc0fd7e) with information about a
      message’s delivery failure.|
  - name: Webhooks > Components > Statuses Object > Conversation Object
    description: >-
      The **`conversation`** object tracks the attributes of your current
      conversation. The following fields are specified within the conversation
      object:


      | Field                        | Description                      |

      |------------------------------|----------------------------------|

      | **`id`**<br/>type: string    |  The ID of the conversation the given
      status notification belongs to. |

      | **`origin`**<br/>type: object | Describes where the conversation
      originated from. See [origin
      object](#efa78bee-682f-4620-9d97-14ecb3cee0ef) for more information.|

      | **`expiration_timestamp`**<br/>type: [UNIX
      timestamp](https://en.wikipedia.org/wiki/Unix_time?fbclid=IwAR3joUPmHY6qMICZD4EeLhuRgSR7F28eKavnrVnru3QFMhtgOcCJ3V-QjbQ)   
      |  The timestamp when the current ongoing conversation expires. This field
      is not present in all Webhook types. |
  - name: Webhooks > Components > Statuses Object > Origin Object
    description: >-
      **This object will become available when [Conversation-Based
      Pricing](https://developers.facebook.com/docs/whatsapp/pricing/conversationpricing)
      launches in a future update.**

      The **`origin`** object describes where a conversation has originated
      from. The following fields are specified within the origin object:


      | Field                        | Description                      |

      |------------------------------|----------------------------------|

      | **`type`**<br/>type: string  | Indicates where a conversation has
      started. This can also be referred to as a conversation entry point.
      Currently, the available options are:<ul><li>**`business_initiated`**:
      indicates that the conversation started by a business sending the first
      message to a user. This applies any time it has been more than 24 hours
      since the last user message.</li><li>**`user_initiated`**: indicates that
      the conversation started by a business replying to a user message. This
      applies only when the business reply is within 24 hours of the last user
      message.</li><li>**`referral_conversion`**: indicates that the
      conversation originated from a [free entry
      point](https://developers.facebook.com/docs/whatsapp/pricing/conversationpricing#free-entry-points).
      These conversations are always user-initiated.</li></ul>|
  - name: Webhooks > Components > Statuses Object > Pricing Object
    description: >-
      The **`pricing`** object includes your billing attributes. The following
      fields are specified within the pricing object:


      | Field                                  |
      Description                      |

      |----------------------------------------|----------------------------------|

      | **`pricing_model`**<br/>type: string  |  Type of pricing model being
      used. Current supported values are:<ul><li>`"CBP"` (conversation-based
      pricing): See [Conversation-Based
      Pricing](https://developers.facebook.com/docs/whatsapp/pricing/conversationpricing)
      for rates based on recipient country.</li><li>`"NBP"` (notification-based
      pricing): Notifications are also known as Template Messages ([click here
      for details on
      pricing](https://developers.facebook.com/docs/whatsapp/pricing)). This
      pricing model will be deprecated in a future release early
      2022.</li></ul>|

      | **`billable`**<br/>type: boolean  | Indicates if the given message or
      conversation is billable. Value varies according to
      **`pricing_model`**.<br/><br/>If you are using CBP (conversation-based
      pricing):<ul><li>This flag is set to **`false`** if the conversation was
      initiated from [free entry
      points](https://developers.facebook.com/docs/whatsapp/pricing/conversationpricing#free-entry-points).
      Conversations initiated from free entry points are not
      billable.</li><li>For all other conversations, it’s set to
      **`true`**.</li><li>This is also set to **`true`** for conversations
      inside your free tier limit. You are not charged for these conversations,
      but they are considered billable and are reflected on your
      invoice.</li></ul><br/>If you are using NBP (notification-based
      pricing):<ul><li>This flag is **`false`** for user-initiated
      conversations.</li><li>This flag is set to **`true`** for notification
      messages (template messages)</li></ul> |

      | **`category`**<br/>type: string | Indicates the conversation pricing
      category. Currently, available options
      are:<ul><li>**`business_initiated`**: indicates that the conversation was
      started by a business sending the first message to a user. This applies
      any time it has been more than 24 hours since the last user
      message.</li><li>**`user_initiated`**: indicates that the conversation was
      initiated by a business replying to a user message. This applies only when
      the business reply is within 24 hours of the last user
      message.</li><li>**`referral_conversion`**: indicates that the
      conversation originated from a [free entry
      point](https://developers.facebook.com/docs/whatsapp/pricing/conversationpricing#free-entry-points).
      These conversations are always user-initiated.</li></ul>|
  - name: Webhooks > Components > Error Object
    description: |-
      | Field                 | Description                      |
      |-----------------------|----------------------------------|
      | **`code`**            | The error code. |
      | **`title`**           | The error title.|
  - name: Webhooks > Components > Button Object
    description: >-
      | Field                 | Description                      |

      |-----------------------|----------------------------------|

      | **`payload`**         | The developer-defined payload for the button
      when a business account sends interactive messages. |

      | **`text`**            | The button text.|
  - name: Webhooks > Components > Referral Object
    description: >-
      | Field | Description |

      | --- | --- | 

      | **`source_url`** | Specifies the URL that leads to the ad or post
      clicked by the user. Opening this URL takes you to the ad viewed by your
      user. |

      | **`source_type`** | Specifies the type of the ad's source. Supported
      values are `"ad"` or `"post"`. |

      | **`source_id`** | Specifies the Meta ID for an ad or post. |

      | **`headline`** | Specifies the headline used in the ad or post that
      generated the message. |

      | **`body`** | The description, or body, from the ad or post that
      generated the message. |

      | **`media_type`** | Media present in the ad or post the user clicked.
      Supported values are `"image"` or `"video"`. |

      | **`image_url`** | **Added if media_type is `“image”`**.<br/> Contains a
      URL to the raw image. |

      | **`video_url`** | **Added if media_type is `“video”`**.<br/> Contains a
      URL to the video. |

      | **`thumbnail_url`** | **Added if media_type is `“video”`**.<br/>
      Contains a URL to the thumbnail image of the clicked video. |
  - name: Webhooks > Message Status Types
    description: >-
      This table lists all possible options for the status of a message.


      | Status | Description | WhatsApp Mobile Equivalent |

      | --- | --- | --- |

      | **`sent`** | Message received by WhatsApp server. | One checkmark |

      | **`delivered`** | Message delivered to the recipient. | Two checkmarks |

      | **`read`** | Message read by recipient. | Two blue checkmarks |

      | **`failed`** | Message failed to send. | Red error triangle |

      | **`deleted`** | Message deleted by the user. | Message is replaced in
      WhatsApp mobile with the note `"This message was deleted"`. |
  - name: Support and Troubleshooting
    description: >-
      This section describes how to troubleshoot errors and contains FAQs
      relating to general questions, technical implementation, data privacy &
      security, and regulatory compliance.
  - name: Support and Troubleshooting > Support
    description: "For support for WhatsApp Business Platform APIs, see [Meta for Developer Support](https://developers.facebook.com/support/).\n\n## WhatsApp Business Platform Status Page\n\nVisit the\_[WhatsApp Business Platform status page](https://l.facebook.com/l.php?u=https://status.fb.com/whatsapp-business-api&h=AT2r6jHfssraigkl_d4AIwRn-a70dgYIRjgzxIlFIXnvRpKPffREAL48kaXUmb4oHe3v62l80-Vv3Y13gHPknTKxBGoqxTB0CPRYWzyQSiL41P8ciFPlSARp9uurGeo0vU2b6XkEUXyWSG_X8dF8qpVL)\_for the latest information on whether the API is experiencing any platform outages."
  - name: Support and Troubleshooting > Errors
    description: >-
      This section contains information relating to error messages. This
      includes a list of all error codes and an [example error message response
      in JSON](#ab9e0327-0c81-4f6a-b068-0e6102363f23).


      If an error is blocking you and you cannot fix it, contact us with both
      the request payload and error response so we can investigate and provide
      support.


      [Click here to see a list of all error
      codes](https://developers.facebook.com/docs/whatsapp/cloud-api/support/error-codes#error-codes).
  - name: Support and Troubleshooting > General FAQs
    description: >-
      **Q: Will all features from the On-Premises API be available on the Cloud
      API?**


      A: We aim to have parity between the on-premises and Cloud APIs starting
      in 2022. At the beginning of the beta in October 2021, we will have parity
      with on-premises version 2.33 with the exception of audio, video, List
      Messages & Stickers. Audio and video messages will become available in
      November 2021, and List Messages & Stickers will not be available for the
      beta.


      * * *


      **Q: Which company will be providing Cloud API?**


      A: The Cloud API will be operated by Meta which provides the [Graph
      API](https://developers.facebook.com/docs/graph-api/), though which
      developers will access the WhatsApp Business API. WhatsApp will continue
      to provide the underlying business messaging routing service that it
      provides for the On-Premise solution.


      * * *


      **Q: How will Meta use the WhatsApp messages that are shared with it by a
      business?**


      A: Meta will not use the messages to inform the ads that a person sees.
      However, as is always the case, businesses can use chats they receive for
      their own marketing purposes, which may include advertising on Meta or
      other channels, like email or TV.


      * * *


      **Q: Does introduction of a cloud-Cloud API mean WhatsApp is deprecating
      the existing On-Premise API?**


      A: No, we will continue to provide the On-Premise API for now.


      * * *


      **Q: Are there any additional costs for the Cloud API?**


      A: No, there is no difference in prices between the Cloud API and the
      On-Premise API. We expect the Cloud API to generate cost savings for
      developers. The two types of cost savings for the Cloud API are:


      1.  Set up cost (including servers or AWS cost)

      2.  Ongoing cost of maintenance (including engineering time for API
      upgrades).
      
      
      * * *


      **Q: How can a Business Solutions Provider decide whether a given client
      should use the On-Premise or Cloud API? Do clients get a choice?**


      A: A Business Solutions Provider can select which setup a given client
      should use. We recommend that the majority of clients use the Cloud API
      for ease of implementation and maintenance.


      * * *


      **Q: Will consumers know whether a business is using the Cloud API or the
      On-Premise API?**


      A: Across all our services, WhatsApp makes the end-to-end encryption
      status of a chat clear. To ensure people know how a business chooses to
      store and manage their messages with customers, we plan to indicate in our
      in-app system messages whether businesses have chosen Meta or another
      company to help store and manage their chats. This will be true for both
      businesses using the Cloud API, and those working with a BSP using the
      on-premise API. Conversations in end-to-end encrypted chats will continue
      to be clearly labeled with a gold system message.
  - name: Support and Troubleshooting > Technical Implementation FAQs
    description: >-
      **Q: What is the architecture of the Cloud API?**


      A: The Cloud API architecture significantly simplifies the BSP’s
      operational and infrastructure requirements to integrate with WhatsApp
      Business API. First, it removes the infrastructure requirements to run
      Business API docker containers (CAPEX savings). Second, it obviates the
      need of operational responsibilities to manage the deployment (OPEX
      savings). For details, refer to the architecture diagram comparing the
      on-premise and Cloud API deployments.


      * * *


      **Q: Will the BSP/direct client need containers and what data will be in
      those containers?**


      A: BSPs and direct clients will not need the WebApp and CoreApp containers
      that are used in the on-premise product. Meta will manage all database
      data and media data on behalf of the BSP or direct client.


      * * *


      **Q: What will disaster recovery look like: if a region is unavailable,
      how much time does it take to move messages to another region?**


      A: We will have disaster recovery and data replication across multiple
      regions. The expected downtime would be within our SLA and usually in the
      order of less than a minute to less than five minutes.


      * * *


      **Q: How does WhatsApp recommend I conduct load tests for the Cloud API?**


      A: As your on-premises performance depends heavily on your hardware,
      software, and connectivity to WhatsApp servers, if you wish to understand
      these differences, you can perform your own load tests on Cloud API as you
      might have done for your own on-premises installation. You can also refer
      to our performance comparison below to understand more details around how
      the on-premise and Cloud APIs compare.
  - name: Support and Troubleshooting > Data Privacy & Security FAQs
    description: >-
      **Q: Where are the servers for the Cloud API?**


      A: Meta has global infrastructure. At this time, the Meta servers
      operating the API will be located in North America.


      * * *


      **Q: Is the Cloud API end-to-end encrypted? What is the encryption
      model?**


      A: For information relating to encryption, see [Cloud API Overview,
      Encryption](#69be62af-c7c0-4c18-ace9-5b80e655c7ba).


      * * *


      **Q: What happens to data at rest? How is it handled? How long is it
      stored?**  

      A: Messages at rest are encrypted. They are automatically deleted after 30
      days.


      * * *


      **Q: Does Meta have access to encryption keys?**


      A: In order to send and receive messages through Cloud APIs, Cloud API
      software manages the encryption/decryption keys on behalf of the business.
      For Cloud API Alpha, WhatsApp will be operating the Cloud API as it is
      still under development and therefore WhatsApp will have access to message
      keys for phone numbers using Cloud API. For the Cloud API Beta and GA
      launches, Meta will operate Cloud API (instead of WhatsApp) and therefore,
      WhatsApp will not have access to keys nor messages.


      * * *


      **Q: What is the best way to complete vendor/supplier due diligence on the
      WhatsApp Business API?**


      A: If you need to document WhatsApp’s security and compliance positions,
      we recommend that you refer to our CSA Consensus Assessments Initiative
      Questionnaire, which we will share via email in early December. It offers
      an industry-accepted way to document what security controls exist in the
      Cloud API, providing security control transparency. It provides a set of
      questions that the Cloud Security Alliance anticipates a cloud consumer or
      auditor would ask a cloud provider. We document WhatsApp’s answers to the
      questionnaire, which should provide a basis for your security, control,
      and process review.


      * * *


      **Q: What is the security model? Which certifications does the WhatsApp
      Business API have?**


      A: We have obtained SOC 2 Type I certification and are pursuing SOC 2 Type
      II. You can refer to the Consensus Assessments Initiative Questionnaire to
      understand the security model.
  - name: Support and Troubleshooting > Regulatory Compliance FAQs
    description: >-
      **Q: Will the Cloud API be compliant with regional data protection laws
      such as GDPR, LGPD, PDPB etc.?**


      A: We care deeply about protecting your data and we are building the Cloud
      API with security in mind. We plan to share the specific details about
      Meta's data practices in the terms that will accompany the Cloud API when
      it launches in beta next year. 


      ----------


      **Q: What does WhatsApp plan to do to make sure the transfer of data from
      the E.U. to the US is compliant?**


      A: On July 16 2020, the Court of Justice of the European Union (CJEU)
      decided that the EU-US Privacy Shield is invalid because of concerns about
      the adequacy of data protection in the US. Our new Business Terms of
      Service now incorporates Standard Contractual Clauses (replacing the US-EU
      and US-Swiss Privacy Shield).


      We welcome the decision of the Court of Justice of the European Union to
      confirm the validity of Standard Contractual Clauses for transfers of data
      to non-EU countries. Like many businesses, WhatsApp uses Standard
      Contractual Clauses as a data transfer mechanism from the European
      Economic Area to the United States in the context of the services we
      provide to businesses - the WhatsApp Business App and the WhatsApp
      Business API.


      We will ensure that our businesses and partners can continue to enjoy
      WhatsApp’s business solutions while keeping their data safe and secure.


      <!-- ----------


      **Q: Does WhatsApp disclose data to governmental authorities and
      agencies?**


      A: No, we don't give governments or anyone else a "backdoor" into our
      systems. -->
paths:
  /{Version}/{Phone-Number-ID}/messages:
    post:
      tags:
        - Examples
      summary: Send Sample Issue Resolution Template
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                messaging_product: whatsapp
                to: '{{Recipient-Phone-Number}}'
                type: template
                template:
                  name: sample_issue_resolution
                  language:
                    code: en_US
                    policy: deterministic
                  components:
                    - type: body
                      parameters:
                        - type: text
                          text: '*Mr. Jones*'
                    - type: button
                      sub_type: quick_reply
                      index: 0
                      parameters:
                        - type: text
                          text: 'Yes'
                    - type: button
                      sub_type: quick_reply
                      index: 1
                      parameters:
                        - type: text
                          text: 'No'
      parameters:
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: Phone-Number-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            text/plain:
              schema:
                type: string
              example: ''
    put:
      tags:
        - API Reference > Messages
      summary: Mark Message As Read
      description: >-
        When you receive an incoming message from Webhooks, you could use
        messages endpoint to change the status of it to read.  

        We recommend marking incoming messages as read within 30 days of
        receipt.  

        **Note**: you cannot mark outgoing messages you sent as read.


        You need to obtain the **`message_id`** of the incoming message from
        Webhooks.


        For a more in depth guide for marking messages as read, see [Guide: Mark
        Messages as
        Read](https://developers.facebook.com/docs/whatsapp/cloud-api/guides/mark-message-as-read).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                messaging_product: whatsapp
                status: read
                message_id: <INCOMING_MSG_ID>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: Phone-Number-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
  /{Version}/{WABA-ID}/subscribed_apps:
    post:
      tags:
        - API Reference > WABA Subscriptions
      summary: Override Callback URL
      description: >-
        If you want to subscribe to Webhooks for multiple WhatsApp Business
        Accounts but want messages field Webhooks notifications to be sent to
        different callback URLs for each WABA, you can override the callback URL
        when subscribing to Webhooks for each WABA.


        To do this, first verify that the alternate Webhook endpoint can receive
        and process Webhooks notifications. Then, subscribe to Webhooks for the
        WABA as your normally would, but include the alternate endpoint's
        callback URL along with its verification token as a JSON payload:



        For more information, see [Overriding the Callback
        URL](https://developers.facebook.com/docs/whatsapp/embedded-signup/webhooks#overriding-the-callback-url).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                override_callback_uri: <ALTERNATE_WEBHOOK_ENDPOINT_URL>
                verify_token: <ALTERNATE_WEBOOK_ENDPOINT_VERIFICATION_TOKEN>
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{User-Access-Token}}
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: WABA-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - override_callback_uri: https://alternate-endpoint-callback.com/webhook
                    whatsapp_business_api_data:
                      id: '670843887433847'
                      link: https://www.facebook.com/games/?app_id=67084...
                      name: Jaspers Market
    get:
      tags:
        - API Reference > WABA Subscriptions
      summary: Get All Subscriptions for a WABA
      description: >-
        To get a list of apps subscribed to Webhooks for a WABA, send a **GET**
        request to the **`subscribed_apps`** endpoint on the WABA:
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{User-Access-Token}}
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: WABA-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - whatsapp_business_api_data:
                      link: <APP1_LINK>
                      name: <APP1_NAME>
                      id: '7234002551525653'
                  - whatsapp_business_api_data:
                      link: <APP2_LINK>
                      name: <APP2_LINK>
                      id: '3736565603394103'
    delete:
      tags:
        - API Reference > WABA Subscriptions
      summary: Unsubscribe from a WABA
      description: >-
        To unsubscribe your app from webhooks for a WhatsApp Business Account,
        send a **DELETE** request to the `/subscribed_apps/` endpoint on the
        WABA.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{User-Access-Token}}
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: WABA-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
  /{Version}/{WABA-ID}/phone_numbers:
    get:
      tags:
        - API Reference > Phone Numbers
      summary: Get Phone Numbers
      description: >-
        This API returns all phone numbers in a WhatsApp Business Account
        specified by the **`{{WABA-ID}}`** value. Get the **`id`** value for the
        phone number you want to use to send messages with WhatsApp Business
        Cloud API.


        #### Response Parameters


        | Name                  | Description                 |

        |-----------------------|-----------------------------|

        | **`verified_name`**         | The verified name associated with the
        phone number.  |

        | **`display_phone_number`**  | The string representation of the phone
        number.       |

        | **`id`**                    | The ID associated with the phone
        number.                            |

        | **`quality_rating`**        | The quality rating of the phone number
        based on how messages have been received by recipients in recent days.
        Valid values are: <br/><ul><li>**`Green`**: High
        Quality</li><li>**`Yellow`**: Medium Quality</li><li>**`Red`**: Low
        Quality</li><li>**`NA`**: Quality has not been determined</li></ul> 
        <br/>For more information relating to quality rating, see [About
        WhatsApp Business Account Message Quality
        Rating](https://www.facebook.com/business/help/896873687365001).                    
        |
      parameters:
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: WABA-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - verified_name: Jasper's Market
                    display_phone_number: +1 631-555-5555
                    id: '1906385232743451'
                    quality_rating: GREEN
                  - verified_name: Jasper's Ice Cream
                    display_phone_number: +1 631-555-5556
                    id: '1913623884432103'
                    quality_rating: NA
  /{Version}/{Phone-Number-ID}/register:
    post:
      tags:
        - API Reference > Account Migration
      summary: Migrate Account
      description: >-
        To migrate your account, make a **POST** call to the
        **`/{{Phone-Number-ID}}/register`** endpoint and include the parameters
        listed below. 


        Your request may take as long as 15 seconds to finish. During this
        period, your on-premise deployment is automatically disconnected from
        WhatsApp server and shutdown; the business account will start up in the
        cloud-hosted service at the same time. After the request finishes
        successfully, you can send messages immediately.


        ## Request Parameters

        | Name                  | Description               |

        |-----------------------|---------------------------|

        |**`messaging_product`**| **Required**.<br/>Messaging service used for
        the request. For account migration, always use `"whatsapp"`. 

        | **`pin`**             |**Required**.<br/>A 6-digit pin you have
        previously set up — See [Set Two-Step
        Verification](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/two-step-verification)
        If you use the wrong pin, your on-premise deployment will be down and
        will be disconnected from the WhatsApp servers.<br/>If you haven't set
        up or you have disabled two-step verification, provide a random 6-digit
        pin in the request, and this will be used to enable two-step
        verification in the WhatsApp Business Cloud-Based API. |

        |**`backup.data`** | **Required**.<br/>The data value you get when you
        backup your on-premise deployment. This contains the account
        registration info and application settings. <br/>For more information,
        see [Backup and
        Restore](https://developers.facebook.com/docs/whatsapp/api/settings/backup-and-restore)
        to backup your on-premise implementation. |

        |**`backup.password`** | **Required**.<br/>The password you used in the
        backup API of your On-Premise deployment.|
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                messaging_product: whatsapp
                pin: 6-digit-pin
                backup:
                  data: backup_data
                  password: password
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: Phone-Number-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                success: 'true'
  /{Version}/{Phone-Number-ID}/deregister:
    post:
      tags:
        - API Reference > Registration
      summary: Deregister Phone
      description: >-
        To deregister your phone, make a **POST** call to
        **`{{Phone-Number-ID}}/deregister`**. **Deregister Phone** removes a
        previously registered phone. You can always re-register your phone using
        by repeating the registration process.


        #### Response


        A successful response returns:


        ``` json

        {
            "success": true
        }


        ```
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '""'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: Phone-Number-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        undefined:
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
  /{Version}/{Phone-Number-ID}/business_compliance_info:
    get:
      tags:
        - API Reference > Business Compliance
      summary: Get India-based business compliance info
      parameters:
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: Phone-Number-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Encoding:
              schema:
                type: string
                example: br
            ETag:
              schema:
                type: string
                example: '"5d9b0d60e85289ecf991fc9d1374a2dea2bb1933"'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=UTF-8
            Vary:
              schema:
                type: string
                example: Accept-Encoding
            x-business-use-case-usage:
              schema:
                type: string
                example: >-
                  {"102290129340398":[{"type":"whatsapp_business_management","call_count":1,"total_cputime":1,"total_time":1,"estimated_time_to_regain_access":0}]}
            x-fb-rlafr:
              schema:
                type: integer
                example: '0'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            facebook-api-version:
              schema:
                type: string
                example: v16.0
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=15552000; preload
            Pragma:
              schema:
                type: string
                example: no-cache
            Cache-Control:
              schema:
                type: string
                example: private, no-cache, no-store, must-revalidate
            Expires:
              schema:
                type: string
                example: Sat, 01 Jan 2000 00:00:00 GMT
            x-fb-request-id:
              schema:
                type: string
                example: Adxmksg34KENIcsc9IhuPOx
            x-fb-trace-id:
              schema:
                type: string
                example: CWbAtEYpDno
            x-fb-rev:
              schema:
                type: integer
                example: '1007307139'
            X-FB-Debug:
              schema:
                type: string
                example: >-
                  KnAizExvSQwkzX5kWoW0eWjbmGFhM7YuFXw9Bvo1fYDJJDurr0s+57kYrB1rNo7DRBOExt0rYt+uc2cFp3YB5w==
            Date:
              schema:
                type: string
                example: Thu, 13 Apr 2023 21:46:15 GMT
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=86400
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: integer
                example: '224'
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - entity_name: Lucky Shrub
                    entity_type: Partnership
                    is_registered: true
                    grievance_officer_details:
                      name: Chandravati P.
                      email: chandravati@luckyshrub.com
                      landline_number: '+913857614343'
                      mobile_number: '+913854559033'
                    customer_care_details:
                      email: support@luckyshrub.com
                      landline_number: '+913857614343'
                      mobile_number: '+913854559033'
                    messaging_product: whatsapp
    post:
      tags:
        - API Reference > Business Compliance
      summary: Add India-based business compliance info
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                    "messaging_product": "whatsapp",
                    "entity_name": "<ENTITY_NAME>",
                    "entity_type": "<ENTITY_TYPE>",
                    "is_registered": <IS_REGISTERED>,
                    "grievance_officer_details": {
                        "name": "<GRIEVANCE_OFFER_NAME>",
                        "email": "<GRIEVANCE_OFFER_EMAIL>",
                        "landline_number": "<GRIEVANCE_OFFER_LANDLINE_NUMBER>",
                        "mobile_number": "<GRIEVANCE_OFFER_MOBILE_NUMBER>"
                    },
                    "customer_care_details": {
                        "email": "<CUSTOMER_CARE_EMAIL>",
                        "landline_number": "<CUSTOMER_CARE_LANDLINE_NUMBER>",
                        "mobile_number": "<CUSTOMER_CARE_MOBILE_NUMBER>"
                    }
                }
      parameters:
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: Phone-Number-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json; charset=UTF-8
            Vary:
              schema:
                type: string
                example: Origin
            cross-origin-resource-policy:
              schema:
                type: string
                example: cross-origin
            x-app-usage:
              schema:
                type: string
                example: '{"call_count":0,"total_cputime":0,"total_time":0}'
            x-fb-rlafr:
              schema:
                type: integer
                example: '0'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            facebook-api-version:
              schema:
                type: string
                example: v16.0
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=15552000; preload
            Pragma:
              schema:
                type: string
                example: no-cache
            Cache-Control:
              schema:
                type: string
                example: private, no-cache, no-store, must-revalidate
            Expires:
              schema:
                type: string
                example: Sat, 01 Jan 2000 00:00:00 GMT
            x-fb-request-id:
              schema:
                type: string
                example: AYkiln3WLsn7Xbi5rwRXGDE
            x-fb-trace-id:
              schema:
                type: string
                example: EBj3JL+cwpH
            x-fb-rev:
              schema:
                type: integer
                example: '1007307139'
            X-FB-Debug:
              schema:
                type: string
                example: >-
                  CXQbL4sps9oXN95xat+eZEsU9mvmrIEgU3NZPA9BNaecLZ1NLgIUO+lVMHfjT2mVIr4dA6IKONfIbhIp3SBQDw==
            Date:
              schema:
                type: string
                example: Thu, 13 Apr 2023 21:35:02 GMT
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=86400
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: integer
                example: '16'
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
  /{Version}/app/uploads/:
    post:
      tags:
        - API Reference > Business Profiles
      summary: Resumable Upload - Create an Upload Session
      description: >-
        The Resumable Upload series of requests allow you to upload Profile
        Pictures to Meta so you can receive a handle to update these pictures in
        the Business Profile API. The Resumable Upload requests consist of the
        following:


        * **Resumable Upload - Create an Upload Session**

        * **Resumable Upload - Upload File Data**

        * **Resumable Upload - Query File Upload Status**


        To create a new upload session, make a **POST** call using the
        `/app/uploads` endpoint.


        For more information, see [Create an Upload
        Session](https://developers.facebook.com/docs/graph-api/guides/upload#step-1--create-a-session).


        **Response**  

        The call returns a server-generated value that includes the session ID
        that you can use in later calls. 


        >Copy this value and Open the **Environment quick look** in Postman and
        paste it in the **CURRENT VALUE** for `Upload-ID`.
      requestBody:
        content: {}
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: OAuth {{User-Access-Token}}
        - name: file_length
          in: query
          schema:
            type: string
          description: '**Required**<br/>Specifies the size of your file in bytes.'
          example: <YOUR_FILE_LENGTH>
        - name: file_type
          in: query
          schema:
            type: string
          description: >-
            **Required**<br/>Specifies the MIME type. Values are
            <ul><li>`image/jpeg`</li><li>`image/png`</li><li>`video/mp4`</li></ul>
          example: image/jpeg
        - name: file_name
          in: query
          schema:
            type: string
          description: >-
            **Optional**<br/>Specifies the file name you are using to create the
            session.
          example: myprofile.jpg
        - name: Version
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: >-
                  upload:MTphdHRhY2htZW50Ojlk2mJiZxUwLWV6MDUtNDIwMy05yTA3LWQ4ZDPmZGFkNTM0NT8=?sig=ARZqkGCA_uQMxC8nHKI
  /{Version}/{Upload-ID}:
    post:
      tags:
        - API Reference > Business Profiles
      summary: Resumable Upload - Upload File Data
      description: >-
        To upload a profile picture to your business profile, make a **POST**
        call to the named endpoint {{Version}}/{{Upload-ID}}, where
        **Upload-ID** is the value you received from **Resumable Upload - Create
        an Upload Session**. This value should look like the following:


        ``` json

        "upload:MTphdHRhY2htZW50Ojlk2mJiZxUwLWV6MDUtNDIwMy05yTA3LWQ4ZDPmZGFkNTM0NT8=?sig=ARZqkGCA_uQMxC8nHKI"


        ```


        The **`file_offset`** parameter **must** be included as an HTTP header.
        It will not work as a query parameter.


        The access token must be included in an Authorization HTTP header. It
        cannot work as a query parameter.


        For more information, see [Initiate Data
        Upload](https://developers.facebook.com/docs/graph-api/guides/upload#step-2--initiate-upload).


        **Response**  

        The call returns a handle that includes the session ID that you can use
        to update your profile picture using **Update Business Profile**.
      requestBody:
        content:
          text/plain: {}
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: image/jpeg
        - name: file_offset
          in: header
          schema:
            type: integer
          description: >-
            Specifies the offset to start the upload. The offset value should
            always be `0`.
          example: '0'
        - name: Authorization
          in: header
          schema:
            type: string
          example: OAuth {{User-Access-Token}}
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: Upload-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                h: >-
                  2:c2FtcGxlLm1wNA==:image/jpeg:GKAj0gAUCZmJ1voFADip2iIAAAAAbugbAAAA:e:1472075513:ARZ_3ybzrQqEaluMUdI
    get:
      tags:
        - API Reference > Business Profiles
      summary: Resumable Upload - Query File Upload Status
      description: >-
        You can query the status of an upload session by making a **GET** call
        to an endpoint that is named based on the **`Upload-ID`** that was
        returned through the **Resumable Upload - Create an Upload Session**
        request.


        When uploading data, you **must include the access token as an HTTP
        header.**


        **Example**

        ``` bash

        GET
        https://graph.facebook.com/v14.0/upload:MTphdHRhY2htZW50Ojlk2mJiZxUwLWV6MDUtNDIwMy05yTA3LWQ4ZDPmZGFkNTM0NT8=?sig=ARZqkGCA_uQMxC8nHKI
        HTTP/1.1

        Authorization: OAuth {{USER_ACCESS_TOKEN}}


        ```


        For more information, see [Query File Upload Status after an
        Interruption](https://developers.facebook.com/docs/graph-api/guides/upload#interruptions).


        **Response**

        The result will be a JSON-encoded ID and offset that looks like the
        following:


        ``` json

        { "id":
        "upload:MTphdHRhY2htZW50Ojlk2mJiZxUwLWV6MDUtNDIwMy05yTA3LWQ4ZDPmZGFkNTM0NT8=?sig=ARZqkGCA_uQMxC8nHKI",
        "file_offset": 0 }

        ```
      parameters:
        - name: Cache-Control
          in: header
          schema:
            type: string
          example: no-cache
        - name: Authorization
          in: header
          schema:
            type: string
          example: OAuth {{User-Access-Token}}
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: Upload-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                id: >-
                  upload:MTphdHRhY2htZW50Ojlk2mJiZxUwLWV6MDUtNDIwMy05yTA3LWQ4ZDPmZGFkNTM0NT8=?sig=ARZqkGCA_uQMxC8nHKI
                file_offset: 0
  /{Version}/{Phone-Number-ID}/whatsapp_business_profile:
    get:
      tags:
        - API Reference > Business Profiles
      summary: Get Business Profile
      description: >-
        To get information about a business profile, make a **GET** call to the
        **`/{{Phone-Number-ID}}/whatsapp_business_profile`** endpoint. Within
        the **`whatsapp_business_profile`** request, you can specify what you
        want to know from the business. 


        ## Fields


        | Name                    | Description                          |

        |-------------------------|--------------------------------------|

        | **`messaging_product`** | **Required**.<br/>The messaging service used
        for the request. Always set the value to `"whatsapp"` if you are using
        WhatsApp for Business API.|

        | **`address`**           | The address of the business. The maximum
        character limit for the string is 256. |

        | **`description`** |Description of the business. The maximum character
        limit for the string is 256. |

        | **`vertical`** | **Optional**. <br/>The industry type of the business.
        This can be either an empty string or one of the accepted
        values<br/><br/>**Values**: `UNDEFINED`, `OTHER`, `AUTO`, `BEAUTY`,
        `APPAREL`, `EDU`, `ENTERTAIN`, `EVENT_PLAN`, `FINANCE`, `GROCERY`,
        `GOVT`, `HOTEL`, `HEALTH`, `NONPROFIT`, `PROF_SERVICES`, `RETAIL`,
        `TRAVEL`, `RESTAURANT`, or `NOT_A_BIZ`.|

        | **`about`** | **Optional**. <br/>The text to display in business
        profile's About section The max length for the string is 139 characters.
        The minimum length for the string is 1 character.<br/><br/>Rendered
        emojis are supported however their unicode values are not. Emoji unicode
        values must be Java- or JavaScript-escape encoded.|

        | **`email`** | **Optional**. <br/>The contact email address (in valid
        email format) of the business. The maximum character limit for the
        string is 128 characters.|

        | **`websites`** | **Optional**. <br/>The URLs associated with the
        business. For instance, a website, Facebook Page, or Instagram. You must
        include the http:// or https:// portion of the URL. There is a maximum
        of 2 websites with a maximum of 256 characters each. |

        | **`profile_picture_handle`** | **Optional**. <br/>The handle of the
        profile picture generated from a call to the [Resumable Upload
        API](https://developers.facebook.com/docs/graph-api/guides/upload).|


        <!-- grahamp 10262022: Removed table item:

        | **`id`**                | **Required**.<br/>The ID of the business
        profile object. |-->
      parameters:
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: Phone-Number-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - business_profile:
                      messaging_product: whatsapp
                      address: business-address
                      description: business-description
                      vertical: business-industry
                      about: profile-about-text
                      email: business-email
                      websites:
                        - https://website-1
                        - https://website-2
                      profile_picture_url: <PROFILE_PICTURE_URL>
    post:
      tags:
        - API Reference > Business Profiles
      summary: Update Business Profile
      description: >-
        Update the business profile information such as the business
        description, email or address. To update your profile, make a **POST**
        call to **`/{{Phone-Number-ID}}/whatsapp_business_profile`**. In your
        request, you can include the parameters listed below.


        It is recommended that you use **Resumable Upload - Create an Upload
        Session** to obtain an upload ID. Then use this upload ID in a call to
        **Resumable Upload - Upload File Data** to obtain the picture handle.
        This handle can be used for the **`profile_picture_handle`**.


        ## Request Parameters


        | Name                    | Description                          |

        |-------------------------|--------------------------------------|

        | **`messaging_product`** | **Required**.<br/>The messaging service used
        for the request. Always set the value to `"whatsapp"` if you are using
        WhatsApp for Business API.|

        | **`address`**           | **Optional**.<br/>The address of the
        business. The maximum character limit for the string is 256. |

        | **`description`** | **Optional**.<br/>The description of the business.
        The maximum character limit for the string is 256. |

        | **`vertical`** | **Optional**. <br/>The industry type of the business.
        This can be either an empty string or one of the accepted
        values.<br/><br/>**Values**: `UNDEFINED`, `OTHER`, `AUTO`, `BEAUTY`,
        `APPAREL`, `EDU`, `ENTERTAIN`, `EVENT_PLAN`, `FINANCE`, `GROCERY`,
        `GOVT`, `HOTEL`, `HEALTH`, `NONPROFIT`, `PROF_SERVICES`, `RETAIL`,
        `TRAVEL`, `RESTAURANT`, or `NOT_A_BIZ`.|

        | **`about`** | **Optional**. <br/>The text to display in business
        profile's About section. The max length for the string is 139
        characters. The minimum length for the string is 1 character.
        <br/><br/>Rendered emojis are supported however their unicode values are
        not. Emoji unicode values must be Java- or JavaScript-escape encoded.|

        | **`email`** | **Optional**. <br/>The contact email address (in valid
        email format) of the business. The maximum character limit for the
        string is 128 characters.|

        | **`websites`** | **Optional**. <br/>The URLs associated with the
        business. For instance, a website, Facebook Page, or Instagram. You must
        include the http:// or https:// portion of the URL. There is a maximum
        of 2 websites with a maximum of 256 characters each. |

        | **`profile_picture_handle`** | **Optional**. <br/>The handle of the
        profile picture generated from a call to **Resumable Upload - Upload
        File Data**. For more information, see [Resumable Upload
        API](https://developers.facebook.com/docs/graph-api/guides/upload).|


        ## Delete Business Profile


        To delete your business profile, you must [delete your phone
        number](https://developers.facebook.com/docs/whatsapp/phone-numbers#delete-phone-number-from-a-business-account).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                messaging_product: whatsapp
                address: <business-address>
                description: <business-description>
                vertical: <business-industry>
                about: <profile-about-text>
                email: <business-email>
                websites:
                  - <https://website-1>
                  - <https://website-2>
                profile_picture_handle: <IMAGE_HANDLE_ID>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: Phone-Number-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - business_profile:
                      messaging_product: whatsapp
                      address: <business-address>
                      description: <business-description>
                      vertical: <business-industry>
                      about: <profile-about-text>
                      email: <business-email>
                      websites:
                        - https://website-1
                        - https://website-2
                      profile_picture_url: https://pps.whatsapp.net/...
                      id: <business-profile-id>
                    id: <phone-number-id>
  /{Version}/{Phone-Number-ID}/media:
    post:
      tags:
        - API Reference > Media
      summary: Upload Sticker
      description: >-
        This request uploads a sticker as .webp. The parameters are specified as
        **form-data** in the request **body**.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                messaging_product:
                  type: string
                  example: whatsapp
                file:
                  type: string
                  format: binary
      parameters:
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: Phone-Number-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Upload Sticker File (form-data)
                  value:
                    id: <MEDIA_ID>
                example-1:
                  summary: Upload Sticker File JSON
                  value:
                    id: '4490709327384033'
  /{Version}/{Media-ID}:
    get:
      tags:
        - API Reference > Media
      summary: Retrieve Media URL
      description: >-
        To retrieve your media’s URL, make a **GET** call to
        **`/{{Media-ID}}`**. Use the returned URL to download the media file.
        Note that clicking this URL (i.e. performing a generic GET) will not
        return the media; you must include an access token. For more
        information, see [Download
        Media](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/media#download-media).


        You can also use the optional query **`?phone_number_id`** for
        **`Retrieve Media URL`** and **`Delete Media`**. This parameter checks
        to make sure the media belongs to the phone number before retrieval or
        deletion.


        #### Response


        A successful response includes an object with a media URL. The URL is
        only valid for 5 minutes. To use this URL, see [Download
        Media](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/media#download-media).
      parameters:
        - name: phone_number_id
          in: query
          schema:
            type: string
          description: >-
            Specifies that this action only be performed if the media belongs to
            the provided phone number.
          example: <PHONE_NUMBER_ID>
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: Media-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                messaging_product: whatsapp
                url: <URL>
                mime_type: image/jpeg
                sha256: <HASH>
                file_size: '303833'
                id: '2621233374848975'
  /{Version}/{Media-ID}/:
    delete:
      tags:
        - API Reference > Media
      summary: Delete Media
      description: >-
        To delete media, make a **DELETE** call to the ID of the media you want
        to delete.


        ## Prerequisites

        - [User Access
        Token](https://developers.facebook.com/docs/facebook-login/access-tokens#usertokens)
        with **`whatsapp_business_messaging`** permission

        - Media object ID from either uploading media endpoint or media message
        Webhooks


        ## Request

        [Perform requests in Graph API
        Explorer](https://developers.facebook.com/tools/explorer/?method=DELETE&path=media_id&version=v8.0)
      parameters:
        - name: phone_number_id
          in: query
          schema:
            type: string
          description: >-
            Specifies that deletion of the media  only be performed if the media
            belongs to the provided phone number.
          example: <PHONE_NUMBER_ID>
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: Media-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
  /{Version}/{Media-URL}:
    get:
      tags:
        - API Reference > Media
      summary: Download Media
      description: >-
        When you retrieve a media URL through the **GET** Media endpoint, you
        must use a User Access Token to download media content from the URL. If
        you click the URL from a browser, you will get an access error. <br/>

        > **Note**: all media URLs will expire after 5 minutes, you need to
        retrieve the media URL again if it expires.


        ## Prerequisites

        - [User Access
        Token](https://developers.facebook.com/docs/facebook-login/access-tokens#usertokens)
        with **`whatsapp_business_messaging`** permission

        - A media URL obtained from retrieving media url endpoint 


        ## Response:

        If successful,  you receive the binary data of media saved in
        **`media_file`**, response headers contain a `content-type` header to
        indicate the mime type of returned data. For more information, see
        [Supported Media
        Types](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/media#supported-media-types).


        If media fails to download, you receive a **404 Not Found** response
        code. In that case, we recommend that you try to [Retrieve Media
        URL](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/media#retrieve-media-url)
        and download again. If doing so doesn't resolve the issue, please try to
        renew the **`USER_ACCESS_TOKEN`** then retry downloading the media.
      parameters:
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: Media-URL
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: image/jpeg
            media_file:
              schema:
                type: string
                example: ''
          content:
            application/json:
              schema:
                type: object
              example: {}
  /{Version}/{Phone-Number-ID}:
    get:
      tags:
        - API Reference > Phone Numbers
      summary: Get Display Name Status (Beta)
      description: >-
        Include **`fields=name_status`** as a query string parameter to get the
        status of a display name associated with a specific phone number. This
        field is currently in beta and not available to all developers.
      parameters:
        - name: fields
          in: query
          schema:
            type: string
          description: >-
            The status of a display name associated with a specific phone
            number. The **`name_status`** value can be one of the following:


            * `APPROVED`: The name has been approved. You can download your
            certificate now.

            * `AVAILABLE_WITHOUT_REVIEW`: The certificate for the phone is
            available and display name is ready to use without review.

            * `DECLINED`: The name has not been approved. You cannot download
            your certificate.

            * `EXPIRED`: Your certificate has expired and can no longer be
            downloaded.

            * `PENDING_REVIEW`: Your name request is under review. You cannot
            download your certificate.

            NONE: No certificate is available.
          example: name_status
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: Phone-Number-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                id: '105954558954427'
                name_status: AVAILABLE_WITHOUT_REVIEW
    post:
      tags:
        - API Reference > Two-Step Verification
      summary: Set Two-Step Verification Code
      description: >-
        You can use this endpoint to change two-step verification code
        associated with your account. 

        After you change the verification code, future requests like changing
        the name, must use the new code. 


        **You set up two-factor verification and [register a phone
        number](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/registration#register-phone)
        in the same API call.**


        You must use the parameters listed below to change two-step
        verification 



        ## Parameters


        | Name          |  Description   |

        |-------------- |--------------- |

        | **`pin`**   | **Required**.<br/> A 6-digit PIN you want to use for
        two-step verification. |
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                pin: <6-digit-pin>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: Phone-Number-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
  /{Version}/{Phone-Number-ID}/request_code:
    post:
      tags:
        - API Reference > Phone Numbers
      summary: Request Verification Code
      description: >-
        You need to verify the phone number you want to use to send messages to
        your customers. Phone numbers must be verified through SMS/voice call.
        The verification process can be done through the Graph API calls
        specified below.
        
        
        To verify a phone number using Graph API, make a **POST** request to
        **`{{PHONE_NUMBER_ID}}/request_code`**. In your call, include your
        chosen verification method and locale. You need to authenticate yourself
        using **{{User-Access-Token}}** (This is automatically done for you in
        the **`Request Verification Code`** request).


        #### Request Parameters


        | Name                  | Description                 |

        |-----------------------|-----------------------------|

        | **`code_method`**         | **Required**.<br/>Specifies the method for
        verification. Supported options are: `SMS` or `VOICE`.  |

        | **`locale`**         | **Required**.<br/>Specifies your locale. For
        instance: `"en_US"`.  |


        #### Response


        After a successful call to **`Request Verification Code`**, you will
        receive your verification code via the method you selected in
        **`code_method`**. To finish the verification process, you need to use
        the [**`Verify
        Code`**](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/phone-numbers#verify)
        request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"code_method\": \"SMS\",\n    \"locale\": \"en_US\"\n}"'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{User-Access-Token}}
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: Phone-Number-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
  /{Version}/{Phone-Number-ID}/verify_code:
    post:
      tags:
        - API Reference > Phone Numbers
      summary: Verify Code
      description: >-
        After you received a SMS or Voice request code from [**`Request
        Verification
        Code`**](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/phone-numbers#verify),
        you need to verify the code that was sent to you. To verify this code,
        make a **POST** request to **`{{PHONE_NUMBER_ID}}/verify_code`** that
        includes the code as a parameter.


        #### Request Parameters


        | Name                  | Description                 |

        |-----------------------|-----------------------------|

        | **`code`**<br/>type: Numeric String | **Required**.<br/>The code you
        received after calling [**`Request Verification
        Code`**](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/phone-numbers#verify)(**`{{PHONE_NUMBER_ID}}/request_code`**). 
        |
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"code\": \"<your-requested-code>\"\n}"'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{User-Access-Token}}
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: Phone-Number-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
  /{Version}/debug_token:
    get:
      tags:
        - API Reference > WhatsApp Business Accounts (WABAs)
      summary: Get Shared WABA ID
      parameters:
        - name: Version
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  app_id: facebook-app-id
                  type: USER
                  application: app-name
                  data_access_expires_at: 1600000000
                  expires_at: 1600000000
                  is_valid: true
                  scopes:
                    - whatsapp_business_management
                    - public_profile
                  granular_scopes:
                    - scope: whatsapp_business_management
                      target_ids:
                        - '111111111111111'
                        - '222222222222222'
                        - '333333333333333'
                  user_id: XXXXXXXXXXXXXXX
  /{Version}/{Business-ID}/client_whatsapp_business_accounts:
    get:
      tags:
        - API Reference > WhatsApp Business Accounts (WABAs)
      summary: Get List of Shared WABAs
      parameters:
        - name: Version
          in: path
          schema:
            type: string
          required: true
        - name: Business-ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - id: 1906385232743451
                    name: My WhatsApp Business Account
                    currency: USD
                    timezone_id: '1'
                    message_template_namespace: abcdefghijk_12lmnop
                  - id: 1972385232742141
                    name: My Regional Account
                    currency: INR
                    timezone_id: '5'
                    message_template_namespace: 12abcdefghijk_34lmnop
                paging:
                  cursors:
                    before: abcdefghij
                    after: klmnopqr
